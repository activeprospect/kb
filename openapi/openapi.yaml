openapi: 3.1.0
info:
  title: LeadConduit API
  version: 1.0.1
  termsOfService: https://activeprospect.com/terms-of-service/
  contact:
    name: ActiveProspect Support Team
    email: support@activeprospect.com
    url: https://support.activeprospect.com
  description: |
    # About
    This documentation is a technical manual for the LeadConduit API. It is
    primarily intended to be read by software developers who want to integrate
    another system with LeadConduit.

    The API is RESTful and speaks JSON over HTTPS. In general, anything that
    can be accomplished by pointing and clicking in the LeadConduit user
    interface can also be done using the API.

    ## Conventions
    This documentation provides examples that show how to interact with the
    API. Examples are shown in monospaced blocks like the one shown below:

    ```
    Examples are presented in blocks like this one
    ```

    You may also see monospaced font inline `like this`. This text represents a
    literal value or expression to be used with the API.

    ## Questions
    If you have a question, or spot an error in the documentation, or just
    generally need to speak with someone about the API, email
    [support@activeprospect.com](mailto:support@activeprospect.com).
servers:
  - url: https://app.leadconduit.com
    description: The base URL for production.
security:
  - APIKey: []
tags:
  - name: Destinations
    description: |
      Destinations are similar to a recipient step in a flow; they represent
      an external system which receives lead data at the end of a flow.
      Data is sent to a Destination if all prior steps have completed successfully,
      and are skipped if an error occurs in a prior step.

      Destinations are configured once and then globally available within all of an account's flows.
      Destinations must be configured within the [LeadConduit app](https://app.leadconduit.com),
      and cannot be configured directly via the API. However, once a destination is configured,
      it can be queried via the API. Configured destinations can also be added to flows via the API.
  - name: Flows
    description: |
      A flow defines how leads are processed. A flow
      can include a range of actions, including validation, normalization, and distribution, that are applied to leads as they
      move through the flow.

      Each step in the flow is represented by a "node," which can perform a specific action or set of actions on the lead.
      For example, a node might validate the lead's phone number or email address, normalize the lead's data, or distribute
      the lead to a specific destination based on predefined rules.

      Flows can be customized to meet the specific needs of your business, and LeadConduit offers a range of pre-built
      templates and tools to help you create a flow that fits your unique requirements.

      Overall, flows are a powerful feature of the LeadConduit platform that enable you to streamline lead processing,
      automate lead distribution, and improve lead quality, all while maximizing your ROI.

      Free accounts do not have access to Flows (https://app.leadconduit.com/flows) and will receive a 401 (Unauthorized)
      error when trying to access it
  - name: Fields
    description: |-
      A field represents a piece of data collected about a lead.  When a field is referenced by ID from a flow's `fields` 
      property, that piece of data will be captured when submitted. LeadConduit provides a large catalog of built-in fields, 
      so there should rarely be a need to create a custom field.  Custom fields are those where the `standard` property is false.

      Free accounts do not have access to Fields (https://app.leadconduit.com/fields) and will receive a 401 (Unauthorized) 
      error when trying to access it
  - name: Changelogs
  - name: Events
  - name: Leads
    description: |-
      Free accounts do not have access to Leads (https://app.leadconduit.com/leads) and will receive a 401 (Unauthorized) 
      error when trying to access it
  - name: Entities
    description: |
      An entity is used to track lead flow. Each entity can be a source or a recipient or both. Entities can be used in 
      multiple flows. When an entity is a source, it can be added to a flow as a source and when it is a recipient, it can be 
      added to a flow as a recipient.
  - name: Firehose
    description: |
      Each flow is separately configured to use the firehose. This API allows firehose configuration to be tested before it 
      is set on a flow.
  - name: Account
    description: |
      The authenticated user reveals the details of the API caller's user account as well as certain details about
      the account of which the user is member. The `products` array reveals all ActiveProspect products and to which the
      caller's account is subscribed.
  - name: System
  - name: Changelogs
    description: |
      A changelog represents a creation, update, or deletion of a model such as
      `Flow`, `Entity`, or `Field`. Every change made will log the exact
      difference between the previous revision and the current one, as well as
      what user was logged in and what account the change was made on.
      Contained within the changelog is the full revision of the model changed
      at the state after the change was applied, as well as the differences
      between the previous revision and current revision.
  - name: Credentials
    description: |
      A credential is used by LeadConduit's rich integrations to authenticate
      with third party platforms. Once a credential is established, it can be
      used across flows. A credential ID can be specified on a source in a flow
      or in recipient step's integration mappings.
  - name: Reports
    description: ''
  - name: Routers
    description: ''
  - name: Types
    x-traitTag: true
    description: |
      A type defines the kind of data LeadConduit expects in a field or in a data point appended to a lead by any
      LeadConduit integration. LeadConduit uses a field's type to understand a value submitted with a lead.

      Types are simple and are all provided "out of the box" by LeadConduit. You cannot add or remove types. Standard
      LeadConduit fields are properly typed. If you need to create a custom field for some reason, you can set the type.

      A field's type...
      * determines whether a field's value is valid
      * normalizes the formatting of a value
      * parses a value into it's constituent components for use in flow rules and mappings
      * protects consumer PII by masking sensitive information before LeadConduit stores it
      * preserves the raw value submitted to LeadConduit, just in case


      ## Boolean

      Boolean fields and variables are declared as type `boolean`.

      | Component | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string  | Unmodified field value submitted with the lead |
      | `valid`         | boolean | Indicates whether the value could be understood as a boolean |
      | `normal`        | boolean | The normalized value (i.e. `"Yes"` is normalized to `true`) |

      ## City

      City fields and variables are declared as type `city`.

      ## Credential

      Credential fields and variables are declared as type `credential`.

      ## Date

      Date fields and variables are declared as type `date`.

      | Component | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string | Unmodified value submitted with the lead |
      | `valid`         | boolean | Indicates whether the value could be understood as a date |
      | `normal`        | string  | The normalized value (i.e. `"10/1/1988"` is normalized to `"1988-10-01"`) |


      ### Supported Formats

      | Format | Example |
      | ------ | ------- |
      | `ddd MMM DD YYYY` | `"Mon Jun 02 2014"` |
      | `MMM DD YYYY`     | `"Jun 02 2014"` |
      | `M/D/YYYY`        | `"6/2/2014 or 06/02/2014"` |
      | `M/D/YY`          | `"6/2/14"` |
      | `YYYY-MM-DD`      | `"2014-06-02"` |
      | `MM-DD-YYYY`      | `"06-02-2014"` |
      | `MMDDYYYY`        | `"06022014"` |
      | `YYYYMMDD`        | `"20140602"` |
      | `"ddd DD MMM YYYY` | `"Fri 18 July 2014"` |
      | `"DD MMM YYYY"`   | `"18 July 2014"` |
      | `"D/M/YYYY"`      | `"18/7/2014"` |
      | `"D/M/YY"`        | `"18/7/14"` |
      |  `"YYYY-DD-MM"`   | `"2014-18-07"` |
      |  `"DD-MM-YYYY"`   | `"18-07-2014"` |
      |  `"DDMMYYYY"`     | `"18072014"` |
      |  `"YYYY-DD-MM"`   | `"2014-18-07"` |
      |  `"YYYYDDMM"`     | `"20141807"` |

      ## Date of Birth

      Date of birth fields and variables are declared as type `dob`. See the [date type](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Date) for supported formats.

      | Component | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string | Unmodified value submitted with the lead |
      | `valid`         | boolean | Indicates whether the value could be understood as a date |
      | `normal`        | string  | The normalized value (i.e. `"10/1/1988"` is normalized to `"1988-10-01"`) |

      ## Email

      Email fields and variables are declared as type `email`.

      | Component       | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string | Unmodified value submitted with the lead |
      | `valid`         | boolean | Indicates whether the value could be understood as an email address |
      | `normal`        | string  | The normalized value (i.e. `"MIKEJONES32@gmail.com"` is normalized to `"mikejones32@gmail.com"`) |
      | `user`          | string  | User name (everything to the left of @) |
      | `domain`        | string  | Domain name (everything to the right of @) |
      | `host`          | string  | Domain excluding top level domain |
      | `tld`           | string  | Top level domain (.com, .net, etc) |
      | `is_free`       | boolean  | Whether or not the email is from a free domain (ex: gmail, yahoo, etc) |
      | `is_disposable` | boolean  | Whether or not the email is disposable |

      ## First Name

      Email fields and variables are declared as type `first_name`.

      ## Gender

      Gender fields and variables are declared as type `gender`. Values are parsed case insensitively. Examples of valid
      gender values are: "male", "m", "female", "f", "other", "o".  

      | Component | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a gender |
      | `normal`        | string  | The normalized value (`"male"`, `"female"`, `"other"`) |
      | `abbr`          | string  | Abbreviation of the `normal` value (`"M"`, `"F"`, `"O"`) |

      ## Last Name

      Last name fields and variables are declared as type `last_name`.

      ## Number

      Number fields and variables are declared as type `number`. Decimal and negative numbers are supported. 
      Currency and unit punctuation characters are ignored.  

      | Component | Type | Description |
      | --------------- | ---- | ----------- |
      | `raw`           | string | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a number |
      | `normal`        | number  | The normalized value (i.e. `"$100.99"` is normalized to `100.99`) |


      ## Phone

      Phone fields and variables are declared as type `phone`. This data type only supports US phone numbers.

      | Component       | Type     | Description |
      | --------------- | -------- | ----------- |
      | `raw`           | string   | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a phone number |
      | `normal`        | string   | The normalized value (i.e. `"(281) 330-8004"` is normalized to `"2813308004"`) |
      | `area`          | string   | Area code portion of the phone number (i.e. `"281"`) |
      | `exchange`      | string   | Exchange portion of the phone number (i.e. `"330"`) |
      | `line`          | string   | Line number portion of the phone number (i.e. `"8004"`) |
      | `number`        | string   | Full number (i.e. `"3308004"` |
      | `extension`     | string   | Phone number extension (i.e. `"2813308004x201" has extension `"201"`) |
      | `type`          | string   | Phone number type based on hint `m`, `h`, or `w` appended to the number- (i.e. `"(281) 330-8004m"` has type of `"mobile"`) |
      | `is_tollfree`   | boolean  | Phone has an `area` of 800, 844, 855, 866, 877, or 888 |

      ### Supported Formats

      | Format | Description |
      | ------ | ------- |
      | `"2813308004"` |  Ten-digit phone number |
      | `"281-330-8004"` |  Ten-digit phone number with dashes |
      | `"281.330.8004"` |  Ten-digit phone number with dots |
      | `"281 330 8004"` |  Ten-digit phone number with spaces |
      | `"(281) 330-8004"` |  Ten-digit phone number with parentheses, space, and dash |
      | `"1 (281) 330-8004"` | Any supported format with preceding country code |

      ### Line Type Hint

      If a raw phone number value has line type hint appended, the phone type will automatically set the `type` value 
      appropriately. For example, the `c` hint found in `281-330-8004 (c)` (c indicates "cell") will cause the `type` 
      value to be set to "mobile". Hints can immediately follow the phone number, can be separated by the phone by any 
      number of spaces, and can also optionally be wrapped in parentheses.

      | Phone Number | `type` Value |
      | ------------ | ------------ |
      | `"2813308004c` | "mobile" |
      | `"2813308004m` | "mobile" |
      | `"2813308004 m` | "mobile" |
      | `"2813308004 (m)` | "mobile" |
      | `"2813308004w` | "work" |
      | `"2813308004h` | "home" |

      ### Extension Hint

      If a raw phone number value has an extension hint appended, the phone type will automatically set the `extension` 
      value appropriately. For example, the `x201` hint found in `281-330-8004 x201` will cause the `extension` 
      value to be set to `"201"`. Hints can immediately follow the phone number, can be separated by the phone by any 
      number of spaces.


      ## Postal Code

      Postal Code fields and variables are declared as type `postal_code`.

      | Component       | Type     | Description |
      | --------------- | -------- | ----------- |
      | `raw`           | string   | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a postal code |
      | `normal`        | string   | The normalized value (i.e. `"78704 4224"` is normalized to `"78704-4224"`) |
      | `country_code`  | string   | Two letter country abbreviation (i.e. `"US"`) |
      | `zip`           | string   | First 5 digits of a US zip code (i.e. `"78704"`) |
      | `four`          | string   | Last 4 digits of a US zip code (i.e. `"4424"` |
      | `fsa`           | string   | Canadian forward sortation area (i.e. `"Q2E 4U7"` has `fsa` of `"Q2E"`) |
      | `ldu`           | string   | Canadian forward sortation area (i.e. `"Q2E 4U7"` has `fsa` of `"47U"`) |
      | `outcode`       | string   | Great Britain outward code (i.e. `"A1 1AA"` has `outcode` of `"A1"`) |
      | `incode`        | string   | Great Britain inward code (i.e. `"A1 1AA"` has `incode` of `"1AA"`) |

      ## Range

      Range fields and variables are declared as type `range`. A range is a field value with lower and upper numeric
      boundaries. Range fields are commonly used in scenarios where a consumer is presented a drop-down. For example,
      the standard `credit_score` range field might have the value `"700 - 749"`.

      | Component       | Type     | Description |
      | --------------- | -------- | ----------- |
      | `raw`           | string   | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a range value |
      | `normal`        | string   | The normalized value (i.e. `"700 to 749"` is normalized to `"700-749"`) |
      | `min`           | number   | The lower boundary of the range (i.e. `700`) |
      | `max`           | number   | The upper boundary of the range (i.e. `749`) |
      | `avg`           | number   | The average of the `min` and `max` accurate to the second decimal place (i.e. `724.50`) |
      | `mid`           | number   | Average of max and min, rounded down to the nearest whole number (i.e. `724`) |

      ## SSN

      US Social Security Number fields and variables are declared as type `ssn`.

      | Component       | Type     | Description |
      | --------------- | -------- | ----------- |
      | `raw`           | string   | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a Social Security Number |
      | `normal`        | string   | The normalized SSN value (i.e. `"1234567890`") |
      | `first_three`   | string   | First three digits of SSN (i.e. SSN `"123-456-7890"` has `first_three` of`"123"`|
      | `middle_two`    | string   | Middle two digits of SSN (i.e. SSN `"123-456-7890"` has `first_three` of`"456"`|
      | `last_four`     | string   | Last four digits of SSN (i.e. SSN `"123-456-7890"` has `first_three` of`"7890"` |

      ## State

      Locality or State fields and variables are declared as type `state`.

      | Component       | Type     | Description |
      | --------------- | -------- | ----------- |
      | `raw`           | string   | Unmodified value submitted with the lead |
      | `valid`         | boolean  | Indicates whether the value could be understood as a locality or state |
      | `normal`        | string   | The normalized locality or state. US states and territories are normalized to their two letter code (i.e. `"TX"`) |
      | `name`          | string   | Full name of the locality or state (i.e `"Texas"`) |

      ## String

      String fields and variables are declared as type `string`.


      ## Time

      Time fields and variables are declared as type `time`.
  - name: Rules
    x-traitTag: true
    description: |
      LeadConduit uses a rules engine to customize flow behavior based on field data, appended data, or internal
      tracking metadata (such as the submission timestamp). The rules engine is built into flow acceptance criteria,
      filtering, volume caps, pricing, mappings, and more. 

      ### Rule Set

      Rules belong to a set which has the following properties:

       * `op` &mdash; `and` or `or` determines whether all rules in set must pass or just one
       * `rules` &mdash; the array of Rules and/or Rule Sets to evaluate

      ### Rules

      Each element of the `rules` array can be a Rule or another Rule Set.

      Rules have the following properties:
       * `lhv` &mdash; left hand value is a key to look up a value from the lead data context
       * `op` &mdash; operator Name of the operator 
       * `rhv` &mdash; right hand value (omit for unary operators like `is blank`)
       * `rule_set` &mdash; optional rule set to be ANDed with the rule

      ### Variables

      When rules are processed the `lhv` will be resolved to a value using the data in the variables found under that key. For example, if the `lhv`
      is "lead.first_name" and the variables are `{ "lead": { "first_name": "Bob" } }`, then the resolved `lhv` will be "Bob".

      ### Templating

      The `lhv` and `rhv` of each rule supports (templating)[https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/]. The variables are used to evaluate the template.
  - name: Invitations
    description: Invite another account to connect
  - name: Variables
    x-traitTag: true
    description: |
      A variable is a key/value pair that is available to filters, rule sets
      and mappings and in templates at run time while processing a lead.

      Every lead is born with a standard set of variables, and additional
      variables are added at run-time as leads are processed by each step in
      the flow. The full set of variables are stored on every event (in the
      `vars` property) generated during lead processing.

      Variables are stored on events as nested objects and are referenced at
      runtime using dot-notation. There are several top-level variable prefixes
      that logically group variables.
  - name: Caps and Limits
    description: |
      LeadConduit supports two controls that set constraints on lead submissions and pings. 

      ### Cap
      A cap allows limiting the number of leads sent to a flow. If a lead is successful, it will be counted against the
      `maximum` configured leads. If configured, the rule set will be evaluated to determine whether a lead will be counted
      against the cap.
  - name: Lead Submission
    x-traitTag: true
    description: |+
      How lead handling works

  - name: Templates
    x-traitTag: true
    description: |
      LeadConduit supports combining, [formatting](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/#tag/Templates/section/Variable-Formatting),
      [hashing](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/#tag/Templates/section/Variable-Hashing), and [performing math](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/#tag/Templates/section/Variable-Math) on
      values using template markup. Templating in LeadConduit is based on the
      popular [Handlebars](https://handlebarsjs.com/) semantic templating
      library. A template is a string which contains any number of variable
      placeholders

      ## Template Variable

      Variable placeholders in templates start and end with two curly-brace
      characters: `{{ lead.first_name }}`. Multiple placeholders can be
      combined in a single template: `{{ lead.first_name }} {{ lead.last_name
      }}`. The [universe of possible variables](https://developers.activeprospect.com/docs/leadconduit/api/tag/Variables/) available to a
      template depends on the [fields](https://developers.activeprospect.com/docs/leadconduit/api/tag/Fields/) defined in your flow and the
      steps you've added to your flow.

      ## Variable Formatting

      LeadConduit has a built-in helper for formatting numbers and dates.
      Formatting a value is done with the `format` helper.  If the value is a
      date field, then you may use date formatting options with the helper.
      If it's a number field, then you may use the number formatting options
      with the helper.

      ### Date Variable Formatting

      To format a date, use the `format` helper: `{{ format lead.dob
      format="YYYY-MM-DD" }}` results in '2015-06-24'. The `format` option is
      a string which defines the format of the date. This format can be any
      combination of the below tokens.  To escape characters in format
      strings, you can wrap the characters in square brackets: `{{ format
      lead.dob format="[It's] MMMM Do" }}` results in "It's October 12th".

      #### Date Format Tokens

      |                            | Token                      | Output     |
      | -------------------------- | -------------------------- | -----------|
      | Month                      | `M`                          | 1 2 ... 11 12
      |                            | `Mo`                         | 1st 2nd ... 11th 12th
      |                            | `MM`                         | 01 02 ... 11 12
      |                            | `MMM`                        | Jan Feb ... Nov Dec
      |                            | `MMMM`                       | January February ... November December
      | Quarter                    | `Q`                          | 1 2 3 4
      |                            | `Qo`                         | 1st 2nd 3rd 4th
      | Day of Month               | `D`                          | 1 2 ... 30 31
      |                            | `Do`                         | 1st 2nd ... 30th 31st
      |                            | `DD`                         | 01 02 ... 30 31
      | Day of Year                | `DDD`                        | 1 2 ... 364 365
      |                            | `DDDo`                       | 1st 2nd ... 364th 365th
      |                            | `DDDD`                       | 001 002 ... 364 365
      | Day of Week                | `d`                          | 0 1 ... 5 6
      |                            | `do`                         | 0th 1st ... 5th 6th
      |                            | `dd`                         | Su Mo ... Fr Sa
      |                            | `ddd`                        | Sun Mon ... Fri Sat
      |                            | `dddd`                       | Sunday Monday ... Friday Saturday
      | Day of Week (Locale)       | `e`                          | 0 1 ... 5 6
      | Day of Week (ISO)          | `E`                          | 1 2 ... 6 7
      | Week of Year               | `w`                          | 1 2 ... 52 53
      |                            | `wo`                         | 1st 2nd ... 52nd 53rd
      |                            | `ww`                         | 01 02 ... 52 53
      | Week of Year (ISO)         | `W`                          | 1 2 ... 52 53
      |                            | `Wo`                         | 1st 2nd ... 52nd 53rd
      |                            | `WW`                         | 01 02 ... 52 53
      | Year                       | `YY`                         | 70 71 ... 29 30
      |                            | `YYYY`                       | 1970 1971 ... 2029 2030
      |                            | `Y`                         | 1970 1971 ... 9999 +10000 +10001 Note: This complies with the ISO 8601 standard for dates past the year 9999
      | Week Year                  | `gg`                         | 70 71 ... 29 30
      |                            | `gggg`                       | 1970 1971 ... 2029 2030
      | Week Year (ISO)            | `GG`                         | 70 71 ... 29 30
      |                            | `GGGG`                       | 1970 1971 ... 2029 2030
      | AM/PM                      | `A`                          | AM PM
      |                            | `a`                          | am pm
      | Hour                       | `H`                          | 0 1 ... 22 23
      |                            | `HH`                         | 00 01 ... 22 23
      |                            | `h`                          | 1 2 ... 11 12
      |                            | `hh`                         | 01 02 ... 11 12
      |                            | `k`                          | 1 2 ... 23 24
      |                            | `kk`                         | 01 02 ... 23 24
      | Minute                     | `m`                          | 0 1 ... 58 59
      |                            | `mm`                         | 00 01 ... 58 59
      | Second                     | `s`                          | 0 1 ... 58 59
      |                            | `ss`                         | 00 01 ... 58 59
      | Fractional Second          | `S`                          | 0 1 ... 8 9
      |                            | `SS`                         | 00 01 ... 98 99
      |                            | `SSS`                        | 000 001 ... 998 999
      |                            | `SSSS ... SSSSSSSSS`         | 000[0..] 001[0..] ... 998[0..] 999[0..]
      | Time Zone                  | `z` or `zz`                  | EST CST ... MST PST (requires use of the `timezone` option)
      |                            | `Z`                          | -07:00 -06:00 ... +06:00 +07:00
      |                            | `ZZ`                         | -0700 -0600 ... +0600 +0700
      | Unix Timestamp             | `X`                          | 1360013296
      | Unix Millisecond Timestamp | `x`                          | 1360013296123

      #### Localized Date Formats

      Because preferred formatting differs based on locale, there are a few
      tokens that can be used to format a moment based on its locale.  There
      are upper and lower case variations on the same formats. The lowercase
      version is intended to be the shortened version of its uppercase
      counterpart.  To change the locale, use the `locale` options: `{{
      format date format="LLL" locale="fr" }}` results in "24 june 2015 17:24".

      |                                      | Format string | Output          |
      | ------------------------------------ | ------------- | ----------------|
      | Time                                 | `LT`            | 8:30 PM
      | Time with seconds                    | `LTS`           | 8:30:25 PM
      | Month numeral, day of month, year    | `L`             | 09/04/1986
      |                                      | `l`             | 9/4/1986
      | Month name, day of month, year       | `LL`            | September 4, 1986
      |                                      | `ll`            | Sep 4, 1986
      | Month name, day of month, year, time | `LLL`           | September 4, 1986 8:30 PM
      |                                      | `lll`           | Sep 4, 1986 8:30 PM
      | Month name, day of month, day of week, year, time | `LLLL` | Thursday, September 4, 1986 8:30 PM
      |                                      | `llll`          | Thu, Sep 4, 1986 8:30 PM

      ### Number Variable Formatting

      To format a number, use the `format` helper: `{{ format
      lead.mortgage.first_mortgage_balance format="$0,0.00"}}` results in
      '$45,302.00'. The `format` option is a string which defines the format
      of the number. See the table of examples below:

      | Number     | Format       | String      |
      | ---------- | ------------ | ----------- |
      | 10000      | `0,0.0000`   | 10,000.0000
      | 10000.23   | `0,0`        | 10,000
      | 10000.23   | `+0,0`       | +10,000
      | -10000     | `0,0.0`      | -10,000.0
      | 10000.1234 | `0.000`      | 10000.123
      | 100.1234   | `00000`      | 00100
      | 1000.1234  | `000000,0`   | 001,000
      | 10         | `000.00`     | 010.00
      | 10000.1234 | `0[.]00000`  | 10000.12340
      | -10000     | `(0,0.0000)` | (10,000.0000)
      | -0.23      | `.00`        | -.23
      | -0.23      | `(.00)`      | (.23)
      | 0.23       | `0.00000`    | 0.23000
      | 0.23       | `0.0[0000]`  | 0.23
      | 1230974    | `0.0a`       | 1.2m
      | 1460       | `0 a`        | 1 k
      | -104000    | `0a`         | -104k
      | 1          | `0o`         | 1st
      | 100        | `0o`         | 100th
      | 1000.234   | `$0,0.00`    | $1,000.23
      | 1000.2     | `0,0[.]00 $` | 1,000.20 $
      | 1001       | `$ 0,0[.]00` | $ 1,001
      | -1000.234  | `($0,0)`     | ($1,000)
      | -1000.234  | `$0.00`      | -$1000.23
      | 1230974    | `($ 0.00 a)` | $ 1.23 m

      Use the `locale` option to format the number to a particular locale:
      `{{ format lead.mortgage.first_mortgage_balance locale="fr"
      format="$0,0.00" }}` results in '€45 302.00'.

      ### Converting Number and Boolean to String

      Fields of type number and boolean can be converted to string using the `format` helper with the `dataType="String"` option:

      `{{format field_name dataType="String"}}`

      Example:
      - Input: `{{format lead.age dataType="String"}}` with `lead.age` = 30
      - Output: "30"

      ### Converting String to Number

      Fields whose final result from the `format` helper is a string can be converted to a number if the `dataType="Number"` option is passed and the value is a string representing a valid number.

      Examples:
      - Input: `{{format lead.postal_code dataType="Number"}}` with `lead.postal_code` = '78751'
      - Output: 78751 (as a number value)

      If the string does not represent a valid number, the result will not be converted:
      - Input: `{{format lead.postal_code dataType="Number"}}` with `lead.postal_code` = 'H3Z 2Y7'
      - Output: 'H3Z 2Y7'

      This can also be used with dates if the formatting returns only numbers, such as epoch time:
      - Input: `{{format lead.source_timestamp format="X" dataType="Number"}}` with `lead.source_timestamp` = '2015-06-24T17:24:49.060Z'
      - Output: 1435166689 (as a number value)


      ## Variable String Manipulation

      Strings can be manipulated with the following helpers:

      ### Lowercase

      Transforms the value to lowercase:

      `{{lowercase field_name}}`

      Example:
      - Input: `{{lowercase lead.first_name}}` with `lead.first_name` = "Mike"
      - Output: "mike"

      ### Uppercase

      Transforms the value to uppercase:

      `{{uppercase field_name}}`

      Example:
      - Input: `{{uppercase lead.first_name}}` with `lead.first_name` = "Mike"
      - Output: "MIKE"

      ### Substring

      Returns a substring from the start position to the end position, or from the start position to the end of the string if no end position is provided:

      `{{substring field_name start="3"}}`

      Example:
      - Input: `{{substring lead.first_name start="3"}}` with `lead.first_name` = "Michael"
      - Output: "chael"

      `{{substring field_name start="2" end="4"}}`

      Example:
      - Input: `{{substring lead.first_name start="2" end="4"}}` with `lead.first_name` = "Michael"
      - Output: "ich"

      ### Replace

      Replaces the pattern with the content of the replace option. The pattern can be a literal string or a regular expression using the `regexp()` option:

      `{{replace field_name pattern="Mi" replace="At"}}`

      Example:
      - Input: `{{replace lead.first_name pattern="Mi" replace="At"}}` with `lead.first_name` = "Michael"
      - Output: "Atchael"

      `{{replace field_name pattern="regexp(h.{3})" replace="ke"}}`

      Example:
      - Input: `{{replace lead.first_name pattern="regexp(h.{3})" replace="ke"}}` with `lead.first_name` = "Michael"
      - Output: "Micke"

      ### Extract

      Extracts all occurrences found with the regular expression in the pattern:

      `{{extract field_name pattern="\$begin:math:display$(.*?)\\$end:math:display$"}}`

      Example:
      - Input: `{{ extract foo pattern="(?<=#)(\\w+)(?=#)" }}` with `lead.first_name` = "#John#Doe#Smith"
      - Output: "John Doe"

      ## Variable Math

      To perform math operations, use the `math` helper: `{{ math "1 + 1" }}`
      results in `2`. Of course, variables can also be used: `{{ math "1 +
      lead.random_number" }}` might result in `32` depending on the value
      of `lead.random_number`. The math expression accepts a pretty basic
      grammar. Operators have the normal precedence:

      | Operator                 | Associativity | Description
      | ------------------------ | ------------- | ----------
      | (...)                    | None          | Grouping
      | f(), x.y                 | Left          | Function call, property access
      | !                        | Left          | Factorial
      | ^                        | Right         | Exponentiation
      | +, -, not, sqrt, etc.    | Right         | Unary prefix operators (see below for the full list)
      | \*, /, %                 | Left          | Multiplication, division, remainder
      | +, -, \|\|               | Left          | Addition, subtraction, concatenation
      | ==, !=, >=, <=, >, <, in | Left          | Equals, not equals, etc. "in" means "is the left operand included in the right array operand?" (disabled by default)
      | and                      | Left          | Logical AND
      | or                       | Left          | Logical OR
      | x ? y : z                | Right         | Ternary conditional (if x then y else z)

      There are also several pre-defined functions:

      | Function      | Description |
      | ------------- | ----------- |
      | sin(x)        | Sine of x (x is in radians)
      | cos(x)        | Cosine of x (x is in radians)
      | tan(x)        | Tangent of x (x is… well, you know)
      | asin(x)       | Arc sine of x (in radians)
      | acos(x)       | Arc cosine of x (in radians)
      | atan(x)       | Arc tangent of x (in radians)
      | sqrt(x)       | Square root of x. Result is NaN (Not a Number) if x is negative.
      | log(x)        | Natural logarithm of x (not base-10). It’s log instead of ln because that’s what JavaScript calls it.
      | abs(x)        | Absolute value (magnitude) of x
      | ceil(x)       | Ceiling of x — the smallest integer that’s >= x.
      | floor(x)      | Floor of x — the largest integer that’s <= x
      | round(x)      | X, rounded to the nearest integer, using "grade-school rounding"
      | roundTo(x, n) | Rounds x to n places after the decimal point
      | exp(x)        | ex (exponential/antilogarithm function with base e)
      | random(n)     | Get a random number in the range [0, n). If n is zero, or not provided, it defaults to 1.
      | fac(n)        | n! (factorial of n: “n * (n-1) * (n-2) * … * 2 * 1″)
      | min(a,b,...)  | Get the smallest (“minimum”) number in the list
      | max(a,b,...)  | Get the largest (“maximum”) number in the list
      | pyt(a, b)     | Pythagorean function, i.e. the c in “c2 = a2 + b2“
      | pow(x, y)     | xy. This is exactly the same as “x^y”. It’s just provided since it’s in the Math object from JavaScript
      | atan2(y, x)   | arc tangent of x/y. i.e. the angle between (0, 0) and (x, y) in radians
      | if(c, a, b)   | Function form of c ? a : b

      #### Example

      To calculate the loan-to-value ratio, given a mortgage loan amount and
      the value of the home: `{{ math "(lead.mortgage.loan.amount /
      lead.mortgage.new_property_value) * 100" }}%`. Note that this example
      expresses the LTV as a percentage, first by calculating the percentage
      and then by appending the `%` character outside the variable
      placeholder. This could instead be handled using
      [formatting](#variable-math-formatting).

      ### Variable Math Formatting

      The `math` helper supports the same options as the `format` helper for
      numbers: `format` and `locale`. For example, to calculate the
      loan-to-value ratio and format it as a percentage: `{{ math
      "lead.mortgage.loan.amount / lead.mortgage.new_property_value"
      format="0.[00]%" }}`. This would return the LTV percentage with up to 2
      decimal points (i.e. 72.93%) as a string value.

      ## Variable Hashing

      LeadConduit supports a wide variety of hashing functions that can be
      applied to variables in a template. The helper name determines the
      hashing algorithm. For example, to use MD5 to hash the email address use:
      `{{ md5 lead.email }}`.  All the following hashing algorithms are
      supported:
        
      * md4
      * md5
      * ripemd
      * ripemd160
      * sha1
      * sha224
      * sha256
      * sha384
      * sha512
      * whirlpool
        
      Multiple values can be hashed together: `{{ md5 lead.email lead.phone_1 }}`. This can be used to salt the hash 
      also: `{{ md5 lead.email "this is my salt" }}`. The `salt` option can also be used. This is the equivalent of the 
      last example: `{{ md5 lead.email salt="this is my salt" }}`.  

      Hashing supports multiple encodings using the `encoding` option:
      `{{ md5 lead.email encoding="base64" }}` results in something like
      "tkK0IXs0sejTvZFfxlxEUg==". The following encodings are supported:
        
      * `hex` (default)
      * `base64`
      * `latin1`
externalDocs:
  url: https://developers.activeprospect.com/
  description: ActiveProspect Developer Portal
paths:
  /account:
    get:
      summary: Get account
      description: Returns the account information of the caller (based on authentication)
      operationId: getAccount
      tags:
        - Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    put:
      summary: Update account
      description: Update my account information
      operationId: updateAccount
      tags:
        - Account
      requestBody:
        description: Update an existing Account
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /caps:
    get:
      summary: List all cap counters
      description: Get the counters for all active caps. Caps that haven't received lead traffic during the current interval will not be included.
      operationId: listCaps
      tags:
        - Caps and Limits
      parameters:
        - in: query
          name: flow_id
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cap-counters'
  /caps/{id}:
    get:
      summary: Get a cap counter
      description: Returns the cap associated to the ID
      operationId: getCap
      tags:
        - Caps and Limits
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the cap to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cap-counter'
  /changelogs:
    get:
      summary: List all changelogs
      description: Get the list of all changelogs.
      operationId: listChangelogs
      tags:
        - Changelogs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelogs'
  /changelogs/{id}:
    get:
      summary: Get a changelog
      description: Returns the changelog matching the specified ID
      operationId: getChangelog
      tags:
        - Changelogs
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the changelog to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelog'
  /credentials:
    get:
      summary: List all credentials
      description: Get the list of all credentials.
      operationId: listCredentials
      tags:
        - Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials'
    post:
      summary: Create a new credential
      description: Create a new credential
      operationId: createCredential
      tags:
        - Account
      requestBody:
        description: Create a new credential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
  /credentials/{id}:
    get:
      summary: Get a credential
      description: Returns the credential matching the specified ID
      operationId: getCredential
      tags:
        - Account
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the credential to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
    put:
      summary: Update a credential
      description: Update an existing credential matching the specified ID
      operationId: updateCredential
      tags:
        - Account
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the credential to update
      requestBody:
        description: Create a new credential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
    delete:
      summary: Delete a credential
      description: Deletes the credential matching the specified ID
      operationId: deleteCredential
      tags:
        - Account
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the credential to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
  /destinations:
    get:
      summary: List all destinations configured for the account
      description: |
        The `/destinations` resource is used to query destinations
        which have been configured in the LeadConduit app.
        If no destinations are configured for your account, this resource will return an empty array.
        Destinations returned from this endpoint can be
        [added to flows](https://developers.activeprospect.com/docs/leadconduit/api/tag/Flows/#tag/Flows/operation/updateFlow).
      operationId: listDestinations
      tags:
        - Destinations
        - Flows
      parameters:
        - name: include
          in: query
          schema:
            type: string
            enum:
              - flow_usages
          description: Additional properties to include in the response.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /entities:
    get:
      summary: List all entities
      description: Get the list of all entities.
      operationId: listEntities
      tags:
        - Entities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
    post:
      summary: Create a new entities
      description: Create a new entities
      operationId: createEntity
      tags:
        - Entities
      requestBody:
        description: Create a new entity
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
  /entities/{id}:
    get:
      summary: Get a entity
      description: Returns the entity matching the specified ID
      operationId: getEntity
      tags:
        - Entities
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the entity to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
    put:
      summary: Update a entity
      description: Update an existing entity matching the specified ID
      operationId: updateEntity
      tags:
        - Entities
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the entity to update
      requestBody:
        description: Create a new entity
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
    delete:
      summary: Delete a entity
      description: Deletes the entity matching the specified ID
      operationId: deleteEntity
      tags:
        - Entities
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the entity to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
  /entities/{id}/changelogs:
    get:
      summary: List changes to an Entity
      description: List all the changes made to an entity
      operationId: listEntityChangelogs
      tags:
        - Entities
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the entity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelogs'
  /events/event-metrics/median:
    get:
      summary: Get median event metrics
      operationId: getEventMetricsMedian
      tags:
        - Events
      parameters:
        - name: max_age
          in: query
          schema:
            type: number
          example: 86400
        - name: target_property
          in: query
          schema:
            type: string
        - name: group_by
          in: query
          schema:
            type: array
            items:
              type: string
        - name: timezone
          in: query
          schema:
            type: number
          example: -18000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        module_id:
                          type: string
                        median:
                          type: number
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/event-metrics/funnel:
    get:
      summary: Get funnel event metrics
      operationId: getEventMetricsFunnel
      tags:
        - Events
      parameters:
        - name: timeframe
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-timeframe'
          example: today
        - name: interval
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-interval'
          example: daily
        - name: timezone
          in: query
          schema:
            type: number
          example: -18000
        - name: steps
          in: query
          schema:
            type: array
            items:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      type: object
                      properties:
                        with_actors:
                          type: boolean
                        actor_property:
                          type: string
                        event_collection:
                          type: string
                        filters:
                          type: array
                          items:
                            type: object
                            properties:
                              operator:
                                type: string
                              property_name:
                                type: string
                              property_value:
                                type: string
                      additionalProperties: true
                  result:
                    type: array
                    items:
                      type: number
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/event-metrics/count:
    get:
      summary: Get event metrics counts
      operationId: getEventMetricsCount
      tags:
        - Events
      parameters:
        - name: group_by
          in: query
          schema:
            type: array
            items:
              type: string
        - name: timeframe
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-timeframe'
          example: this_14_days
        - name: interval
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-interval'
          example: daily
        - name: timezone
          in: query
          schema:
            type: number
          example: -18000
        - name: filters
          in: query
          schema:
            type: array
            items:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: array
                          items:
                            type: object
                            properties:
                              outcome:
                                type: string
                              result:
                                type: number
                        timeframe:
                          $ref: '#/components/schemas/event-metrics-timeframe-bounded'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/event-metrics/count_unique:
    get:
      summary: Get unique event metrics counts
      operationId: getEventMetricsCountUnique
      tags:
        - Events
      parameters:
        - name: group_by
          in: query
          schema:
            type: array
            items:
              type: string
        - name: timeframe
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-timeframe'
        - name: interval
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-interval'
          example: daily
        - name: timezone
          in: query
          schema:
            type: number
          example: -18000
        - name: filters
          in: query
          schema:
            type: array
            items:
              type: object
        - name: target_property
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: array
                          items:
                            type: object
                            properties:
                              outcome:
                                type: string
                              result:
                                type: number
                        timeframe:
                          $ref: '#/components/schemas/event-metrics-timeframe-bounded'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/event-metrics/select_unique:
    get:
      summary: Select unique event metrics
      operationId: getEventMetricsSelectUnique
      tags:
        - Events
      parameters:
        - name: group_by
          in: query
          schema:
            type: array
            items:
              type: string
        - name: timeframe
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-timeframe'
        - name: interval
          in: query
          schema:
            $ref: '#/components/schemas/event-metrics-interval'
        - name: timezone
          in: query
          schema:
            type: number
          example: -18000
        - name: filters
          in: query
          schema:
            type: array
            items:
              type: object
        - name: target_property
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        vars.source.id:
                          type: string
                        vars.recipient.id:
                          type: string
                        result:
                          type: array
                          items:
                            type: string
                      additionalProperties: true
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events:
    get:
      summary: List all events
      description: |
        The `/events` resource is used to query
        [events](https://developers.activeprospect.com/docs/leadconduit/api/tag/Leads/#tag/Leads/schema/Event)
        generated while handling leads. For each lead, one event is generated for
        each configured [flow
        step](https://developers.activeprospect.com/docs/leadconduit/api/tag/Flows/#tag/Flows/schema/Flow)
        that handles the lead. After lead processing completes, a source event
        is also recorded.
      operationId: listEvents
      tags:
        - Leads
      parameters:
        - name: after_id
          in: query
          schema:
            $ref: '#/components/schemas/ID'
          description: Return only events that were created after the one with this ID (exclusive)
        - name: before_id
          in: query
          schema:
            $ref: '#/components/schemas/ID'
          description: Return only events that were created before the one with this ID (exclusive)
        - name: start
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: Return only events that were created at or after this time
        - name: end
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: Return only events that were created at or before this time
        - name: rules
          in: query
          schema:
            type: string
          description: Stringified array of Rules to select matching events
        - name: include
          in: query
          schema:
            type: array
            items:
              type: string
          description: An array of fields to include. Cannot be used with exclude.
        - name: exclude
          in: query
          schema:
            type: array
            items:
              type: string
          description: An array of fields to exclude. Cannot be used with include.
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          description: The maximum number of events to return (maximum limit is 1000, default 100)
        - name: sort
          in: query
          schema:
            type: string
          description: The results are sorted by date. Use asc to sort by oldest first or desc to sort by newest first. Defaults to desc.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    post:
      summary: List all events for exports
      description: |
        The `/events` resource is used to query
        [events](https://developers.activeprospect.com/docs/leadconduit/api/tag/Leads/#tag/Leads/schema/Event)
        generated while handling leads. For each lead, one event is generated for
        each configured [flow
        step](https://developers.activeprospect.com/docs/leadconduit/api/tag/Flows/#tag/Flows/schema/Flow)
        that handles the lead. After lead processing completes, a source event
        is also recorded.
      operationId: listEventsPost
      tags:
        - Leads
      requestBody:
        description: Query parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/{id}:
    get:
      summary: Fetch a single event
      operationId: getEvent
      tags:
        - Leads
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the event to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /events/stats:
    get:
      summary: Retrieve statistics on events
      description: |
        The `/events/stats` resource is used to count events. The event count can be grouped by any field collected 
        with the lead or appended to the lead during flow processing. The API also supports returning results in JSON 
        or CSV using the appropriate MIME type in the `Accept` header.
      operationId: eventStatistics
      tags:
        - Leads
        - Reports
      parameters:
        - name: type
          in: query
          schema:
            type: string
          description: 'Convenience option that specifies a filter on event type (source, recipient, filter, feedback-received, or feedback-sent). Can be used multiple times to specify multiple types. (default: source)'
        - name: rule
          in: query
          schema:
            $ref: '#/components/schemas/Rule'
          description: Limit counted events using this rule. Can be used multiple times to specify multiple rules. Each rule must be sent as URL encoded JSON.
        - name: group_by
          in: query
          schema:
            type: string
          description: 'Group event counts by unique values of this property. Can be used multiple times to specify multiple properties. (default: none)'
        - name: interval
          in: query
          schema:
            type: string
          description: 'Groups event counts into sub-timeframes spanning a specified length of time: minutely, hourly, daily, weekly, monthly, yearly (default: none)'
        - name: timezone
          in: query
          schema:
            type: integer
          description: When an interval is specified, this time zone will be used to set the start and end of each interval. Any tz database time zone name (i.e. America/Chicago) or the number of seconds to offset time from UTC (i.e. -18000)
        - name: start
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: 'Count events that were created at or after this time (default: beginning of the day today)'
        - name: end
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: 'Count events that were created at or before this time (default: end of the day today)'
        - name: outcome
          in: query
          schema:
            type: string
          description: 'DEPRECATED: use column instead. The outcome to count (default: success, failure, error). Can be used multiple times to specify multiple types.'
        - name: column
          in: query
          schema:
            $ref: '#/components/schemas/event-statistic'
          description: A column to aggregate. Can be used multiple times to specify multiple columns.  source-success, source-failure, source-error
        - name: by_lead
          in: query
          schema:
            type: boolean
          description: 'Boolean indicating whether to count unique leads or unique events - false counts individual events (default: true)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-statistics'
  /fields:
    get:
      summary: List all fields
      description: |
        Get the list of all fields, including all standard and custom fields.
      operationId: listFields
      tags:
        - Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    post:
      summary: Create a field
      description: |
        Create a new custom field, adding it to the list of all fields in the
        account.
      operationId: createField
      tags:
        - Fields
      requestBody:
        description: Create a new field
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /fields/{id}:
    get:
      summary: Get a field
      description: Fetch a single field.
      operationId: getField
      tags:
        - Fields
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the field to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    put:
      summary: Update a field
      description: |
        Update an existing custom field. Standard fields cannot be updated.
      operationId: updateField
      tags:
        - Fields
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the field to update
      requestBody:
        description: Updated an existing field
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    delete:
      summary: Delete a field
      description: |
        Delete an existing custom field. If a field is referenced in a flow and
        is deleted, an HTTP 202 will be returned but that flow will continue to
        operate as though the field still exists. The errors for each flow will
        be returned to the response body and the recorded on the flow's error
        property. More changes to the flow must dereference the field.

        Standard fields cannot be deleted.
      operationId: deleteField
      tags:
        - Fields
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the field to delete
      responses:
        '202':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /fields/{id}/changelogs:
    get:
      summary: List changes to a Field
      description: Lists all the changes made to a Field
      operationId: listFieldChangelogs
      tags:
        - Fields
      parameters:
        - in: path
          name: id
          description: ID of the Field
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelogs'
  /firehose:
    get:
      summary: Test firehose's ability to write to s3
      description: |
        The `/firehose` resource is used to validate s3 credentials by writing a
        test file to a given bucket. If a prefix is provided, the file is written
        to `<prefix>/leadconduit-events/test.txt`, otherwise it's written to
        `leadconduit-events/test.txt`.
      operationId: firehose
      tags:
        - Firehose
      parameters:
        - in: query
          name: access_key_id
          description: AWS Access Key Id, used to write to a given S3 bucket
          schema:
            type: string
          required: true
        - in: query
          name: secret_access_key
          description: AWS Secret Access Key, used to write to a given S3 bucket
          schema:
            type: string
          required: true
        - in: query
          name: bucket
          description: The name of the s3 bucket
          schema:
            type: string
          required: true
        - in: query
          name: prefix
          description: |
            If provided, files written to s3 will be written as
            &lt;prefix>/&lt;lead id>/&lt;event id>.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ETag:
                    type: string
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /flows:
    get:
      summary: List all flows
      description: Returns all the flows associated to an account
      operationId: listFlows
      tags:
        - Flows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flow'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    post:
      summary: Create a new flow
      description: Create a new flow, adding it to the list of all flows in the account. The caller may specify an ID for a flow, provided it is a valid BSON ID
      operationId: createFlow
      tags:
        - Flows
      requestBody:
        description: Create a new flow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flow'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
    put:
      summary: Update all flows
      description: Update all flows for an account. Only users with superuser access can run this.
      operationId: updateFlows
      tags:
        - Flows
      responses:
        '200':
          description: OK
  /flows/{id}:
    get:
      summary: Get a flow
      description: Returns the flow associated to the ID
      operationId: getFlow
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the flow to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
    put:
      summary: Update an existing flow
      description: Update an existing Flow
      operationId: updateFlow
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the flow to update
      requestBody:
        description: Update a flow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flow'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
    delete:
      summary: Delete an existing flow
      description: Once a flow is deleted it will no longer accept leads. Attempting to submit leads to a deleted flow will result in an HTTP 404. Returns the flow as it existed at the time of deletion.
      operationId: deleteFlow
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the flow to delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
  /flows/{id}/deploy:
    post:
      summary: Deploy a saved flow to production
      description: A flow defines how lead submissions will be handled. In order to make a flow's latest state active for lead handling, it must be deployed. Because changes to a flow can be made without deploying them, you are free make flow updates without affecting current lead handling.  Put another way, a deployment must be performed after it is created or updated in order for lead handling to start using the new configuration.
      operationId: deployFlow
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          description: ID of the flow to deploy
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResponse'
  /flows/{id}/changelogs:
    get:
      summary: List changes to a Flow
      description: Lists all the changes made to a flow
      operationId: listFlowChangelogs
      tags:
        - Changelogs
      parameters:
        - in: path
          name: id
          description: ID of the flow
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelogs'
  /flows/{id}/fields:
    get:
      summary: List fields associated to the Flow
      description: List fields associated to the Flow
      operationId: listFlowFields
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          description: ID of the flow schema
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
  /flows/{id}/fields/usage:
    get:
      summary: Get flow field usages
      description: Count the number of leads processed by flow field. This tells you which and how much each flow field was used today. You can change the timeframe using the `timeframe` parameter (i.e. `timeframe=previous_30_days`), though this is discouraged because this query is fairly heavy.
      operationId: flowFieldUsages
      tags:
        - Flows
      parameters:
        - in: path
          name: id
          description: ID of the flow
          schema:
            $ref: '#/components/schemas/ID'
          required: true
        - in: query
          name: timeframe
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  /invitations/source:
    post:
      summary: Create a source invitation
      description: Send an invitation to Account's Team and return a source pending entity
      operationId: createInvitationSource
      tags:
        - Invitations
      requestBody:
        description: Create a new source invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationSuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /invitations/recipient:
    post:
      summary: Create a recipient invitation
      description: Send an invitation to Account's Team and return a recipient pending entity
      operationId: createInvitationRecipient
      tags:
        - Invitations
      requestBody:
        description: Create a recipient invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationSuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /packages:
    get:
      summary: List all integration packages
      description: Get the list of all integration packages.
      operationId: listPackages
      tags:
        - Packages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationPackage'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /packages/{id}:
    get:
      summary: Fetch a single integration package
      description: Fetch a single integration package.
      operationId: getPackage
      tags:
        - Packages
      parameters:
        - in: path
          name: id
          description: ID of the package
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationPackage'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
  /ping_limits:
    get:
      summary: List all ping limit counters
      description: |
        Get the counters for all active ping limits. Ping limits that haven't
        received ping traffic during the current interval will not be included.
      operationId: listPingLimits
      tags:
        - Caps and Limits
      parameters:
        - in: query
          name: flow_id
          description: Return the ping limits where `flow_id` matches this value
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PingLimit'
  /ping_limits/{id}:
    get:
      summary: Fetch a ping limit counter
      description: Get a counter for a single ping limit.
      operationId: getPingLimits
      tags:
        - Caps and Limits
      parameters:
        - in: path
          name: id
          description: The ID of the specific Ping Limit
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingLimit'
  /reports:
    get:
      summary: List all reports
      description: Get the list of all reports.
      operationId: listReports
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
    post:
      summary: Create a new report
      description: Create a new report, adding it to the list of all reports in the account.
      operationId: createReport
      tags:
        - Reports
      requestBody:
        description: Create a new Report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
  /reports/{id}:
    get:
      summary: Fetch a single report
      description: |
        Get the report definition for an individual report. The parameter can be
        a report id, which requires passing the api_key or a report token, which
        does not.
      operationId: getReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID or token of the report to fetch
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
    put:
      summary: Update an existing report
      description: |
        Update an existing report. Note that the token cannot be updated with
        this call. Use the /share endpoint to generate a new token and `/unshare`
        to clear it.
      operationId: updateReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID or token of the report to fetch
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      requestBody:
        description: Update an existing report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '200':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
    delete:
      summary: Delete a report
      description: Delete an existing report.
      operationId: deleteReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID or token of the report to delete
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
  /reports/{id}/share:
    put:
      summary: Fetch a report's token
      description: |
        Share a report by generating a new token for a report. Once the token is
        retrieved, you can use it in place of the ID in the `/reports/:id`
        endpoint.
      operationId: shareReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID of the report to share
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /reports/{id}/unshare:
    put:
      summary: Clear's a reports share token
      description: Unshare a report by clearing the report's token.
      operationId: unshareReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID of the report to unshare
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: 'null'
  /reports/preview:
    post:
      summary: Create a report without saving it
      description: |
        Create a report but don't save it. The report definition is provided in
        the post body and the time range is provided as query parameters.
      operationId: previewReport
      tags:
        - Reports
      parameters:
        - in: query
          name: start
          description: |
            limit events counted in report to those recorded at or after this time
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          description: |
            limit events counted in report to those recorded at or before this
            time
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
        - in: query
          name: columns
          description: Array of report columns to display
          schema:
            type: array
            items:
              $ref: '#/components/schemas/report-column'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
  /reports/{id}/run:
    get:
      summary: Run a report
      description: |
        Run a report that was previously created. The parameter can be an id or
        token. The time range is provided as query parameters.
      operationId: runReport
      tags:
        - Reports
      parameters:
        - in: path
          name: id
          description: ID or token of the report to run
          schema:
            $ref: '#/components/schemas/ID'
          required: true
        - in: query
          name: start
          description: |
            limit events counted in report to those recorded at or after this time
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          description: |
            limit events counted in report to those recorded at or before this
            time
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
  /reports/{token}/meta:
    get:
      summary: Get report metadata
      description: Get the metadata for a report that was shared.
      operationId: getReportMeta
      tags:
        - Reports
      parameters:
        - in: path
          name: token
          description: Token of the report to retrieve metadata for
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  account_name:
                    type: string
                  vars:
                    type: array
                    items:
                      type: object
                  flows:
                    type: array
                    items:
                      type: object
                  entities:
                    type: array
                    items:
                      type: object
  /routers:
    get:
      summary: List all routers
      description: Get the list of all routers.
      operationId: listRouters
      tags:
        - Routers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Router'
    post:
      summary: Create a router
      description: |
        Create a new custom router, adding it to the list of all routers in the
        account.
      operationId: createRouter
      tags:
        - Routers
      requestBody:
        description: Create a new Router
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Router'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Router'
  /routers/{id}:
    get:
      summary: Get a router
      description: Fetch a single router.
      operationId: getRouter
      tags:
        - Routers
      parameters:
        - in: path
          name: id
          description: The ID of the router
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Router'
    put:
      summary: Update a router
      description: |
        Update an existing custom router. Standard routers cannot be updated.
      operationId: updateRouter
      tags:
        - Routers
      parameters:
        - in: path
          name: id
          description: The ID of the router
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      requestBody:
        description: Update an existing Router
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Router'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Router'
  /search/leads:
    get:
      summary: Search leads
      description: |
        The `/search/leads` resource is used to find leads using full text
        search. For example, you can search for `fred` in `texas` using:

        ```
        /search/leads?query=fred+tx
        ```

        ## Search Criteria

        * pass in the search text using the query parameter:
          `/search/leads?query=fred`
        * the query parameter should be URL encoded
        * searching is case-insensitive: `FRED` and `fred` will both match `Fred`
        * you don't have to enter a complete word - searching will match the
          beginning of words: `/search/leads?query=sam` will match `sam` and
          `samantha`
        * queries with multiple words like `fred tx` will match leads that have
          both `fred` AND `tx`
        * to specify an exact phrase (with spaces), use double quotes - `"fred
          tx"` will only match that exact text

        The search results can be sorted and paginated. There are two query
        parameter to control sorting: `sort_by` and `sort_dir`. The `sort_by`
        parameter takes a field name (see list below) and `sort_dir` is ascending
        (`asc`) or descending (`desc`). By default, the results are sorted by
        relevance.

        There are two query parameters to control paging: `from` and `limit`. The
        `from` parameter specifies the starting offset of that page in the search
        results and the `limit` parameter specifies how many search results to
        return. From is zero-based so to get the first 10 results, use
        `from=0&limit=10`, the second 10 using `from=10&limit=10`, etc... The
        maximum `limit` is 100 at a time, with an overall maximum of 1,000 search
        results.

        ## Search Results

        The search results has the total number of matching leads and an array of
        hits, where each hit is a matching Lead Search Result. Each lead search
        result contains basic information about the lead, the latest event for
        that lead, and highlighting of the matched text.
      operationId: leadSearch
      tags:
        - Leads
      parameters:
        - in: query
          name: query
          description: text to search for
          schema:
            type: string
        - in: query
          name: sort_by
          description: |
            One of the following field names: `lead_id`, `submission_timestamp`,
            `first_name`, `last_name`, `email`, `phone_1`, `phone_2`,
            `address_1`, `city`, `state`, `postal_code`, `reference`
          schema:
            type: string
            enum:
              - lead_id
              - submission_timestamp
              - first_name
              - last_name
              - email
              - phone_1
              - phone_2
              - address_1
              - city
              - state
              - postal_code
              - reference
        - in: query
          name: sort_dir
          description: |
            The sort direction: "asc" or "desc", default is by relevance
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: from
          description: |
            The starting offset of leads to return in the matching result set,
            zero-based
          schema:
            type: integer
        - in: query
          name: limit
          description: |
            The maximum number of leads to return (maximum is 100, default is 10)
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: array
                    items:
                      $ref: '#/components/schemas/lead-search-result'
                  total:
                    type: number
  /services:
    get:
      summary: Get Pricing Services
      description: |
        Returns a list of configured pricing services.
      operationId: listServices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PricingService'
  /status:
    get:
      summary: Get system status
      description: Shows the general status of the system
      operationId: status
      tags:
        - System
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /submission_doc_access_logs:
    get:
      summary: Returns the list of submission docs from other accounts accessed by an account's users.
      description: A record is created when users access submission docs for accounts outside of their own. This endpoint retrieves a list of those records where visibility is not blocked in the database (field 'hidden' equal to true). To fetch all records, including those marked as hidden, the query parameter `show_hidden` can be passed with a value of true.
      operationId: listSubmissionDocAccessLogs
      tags:
        - SubmissionDocAccessLogs
      parameters:
        - in: query
          name: show_hidden
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDocAccessLogs'
  /submission_doc_access_logs/account/{account_id}:
    put:
      summary: Set submission docs access logs visibility for all docs associated with a specific account
      description: Set the property `hidden` for one or more submission docs access logs. This endpoint updates the `hidden` property with the value provided in the request body for the docs whose flow belongs to the account with the ID passed in the path parameter.
      operationId: updateSubmissionDocsAccessLogsForAccount
      tags:
        - SubmissionDocAccessLogs
      parameters:
        - in: path
          name: account_id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the account to update the submission docs
      requestBody:
        description: Flag do define if a submission doc access log will be retrieved by the query endpoint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubmissionDocsAccessLogsVisibility'
      responses:
        '200':
          description: OK
        '400':
          description: Missing mandatory body field "hidden" with type "boolean"
  /submission_doc_access_logs/flow/{flow_id}:
    put:
      summary: Set submission docs access logs visibility for all docs associated with a specific flow
      description: Set the property `hidden` for all submission docs access logs belonging to the flow with the given ID. This endpoint updates the `hidden` property with the value provided in the request body for all docs associated with the specified flow ID.
      operationId: updateSubmissionDocsAccessLogsForFlow
      tags:
        - SubmissionDocAccessLogs
      parameters:
        - in: path
          name: flow_id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the flow to update the submission docs
      requestBody:
        description: Flag do define if a submission doc access log will be retrieved by the query endpoint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubmissionDocsAccessLogsVisibility'
      responses:
        '200':
          description: OK
        '400':
          description: Missing mandatory body field "hidden" with type "boolean"
  /submission_doc_access_logs/flow/{flow_id}/source/{source_id}:
    put:
      summary: Set submission docs access logs visibility for one doc associated with a specific flow and source
      description: Set the property `hidden` for a submission doc access log belonging to both the flow and source with the given IDs. This endpoint updates the `hidden` property with the value provided in the request body for all docs associated with the specified flow and source IDs.
      operationId: updateSubmissionDocsAccessLogsForFlowAndSource
      tags:
        - SubmissionDocAccessLogs
      parameters:
        - in: path
          name: flow_id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the flow to update the submission docs
        - in: path
          name: source_id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the source to update the submission docs
      requestBody:
        description: Flag do define if a submission doc access log will be retrieved by the query endpoint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubmissionDocsAccessLogsVisibility'
      responses:
        '200':
          description: OK
        '400':
          description: Missing mandatory body field "hidden" with type "boolean"
  /types:
    get:
      summary: List data types
      description: Lists the data [types](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/) available for fields or vars
      operationId: listTypes
      tags:
        - Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Type'
  /user:
    get:
      summary: Get user
      description: This singleton resource returns the currently authenticated user
      operationId: getAuthenticatedUser
      tags:
        - Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser'
  /user/{id}:
    put:
      summary: Update user
      description: Resource for User or user admin to toggle modal flag
      operationId: updateUser
      tags:
        - Account
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
          description: ID of the user to update
      requestBody:
        description: UI State flags are passed as boolean values. Response will return the flag as a date-time string or null value
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser'
  /vars:
    get:
      summary: List variables
      description: |
        The `/vars` resource is used to identify which data points have been
        collected in your flows. This resource is used to determine which data
        points are available for exports and stats queries.

        As a lead is processed by a flow, a variable for every field value and
        every piece of appended data is created. If the variable for a data point
        already exists, a new one is not created. That is to say that there will
        only ever be one `lead.email` variable. Each time an email address is
        collected, the `last_seen_at` timestamp is updated.
      operationId: vars
      tags:
        - Fields
      parameters:
        - in: query
          name: flow_id
          description: |
            Return only variables where the flow ID matches this value (multiple
            `flow_id` parameters may be used to select variables across several
            specific flows)
          schema:
            $ref: '#/components/schemas/ID'
        - name: start
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: Return only variables seen at or after this time
        - name: end
          in: query
          schema:
            $ref: '#/components/schemas/Timestamp'
          description: Return only variables created at or before this time
        - name: exclude
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Var'
  /version/ui:
    get:
      summary: Get UI app version
      description: Returns the current UI app version.
      operationId: versionUi
      tags:
        - System
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionUi'
components:
  securitySchemes:
    APIKey:
      type: http
      scheme: basic
      description: |
        LeadConduit uses [HTTP Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)
        with the username `API` and your API key as the password.

        For example: `API:1f1b96c9150d8050e858c043d543bb4eadae0e6f`'
  schemas:
    acceptance-criteria:
      title: Acceptance Criteria
      type: object
      properties:
        rule_set:
          $ref: '#/components/schemas/rule-set'
          description: This rule set must pass in order for a lead to be accepted
        outcome:
          type: string
          description: When the rule set fails, `success`, `failure` or `error` is returned to the source that submitted the lead
          enum:
            - success
            - failure
            - error
          example: failure
        reason:
          $ref: '#/components/schemas/Template'
          description: When the outcome is `failure`, this is the reason to provide to the source
          example: Lead must live in TX
          type: string
      additionalProperties: false
      required:
        - outcome
        - rule_set
      description: |
        Acceptance criteria specifies the kinds of leads that a source or sources must provide in a flow. Acceptance criteria can be configured at both a flow level and a source level. When a source submits a lead, the flow-level acceptance criteria rule set is evaluated first, then any source-level acceptance criteria. If the rule sets pass, then the lead is allowed to progress on in the flow. But if either rule set fails, then the source is immediately given a response and no further processing takes place in the flow for that lead.
    Account:
      x-tags:
        - Account
      type: object
      description: |
        Details of the company account
      properties:
        id:
          $ref: '#/components/schemas/ID'
        sso_id:
          $ref: '#/components/schemas/ID'
        api_key:
          description: Company-level API key (best practice is to use user-level API key)
          type: string
          readOnly: true
        name:
          type: string
          description: Company name
          readOnly: true
          example: Acme, Inc.
        time_zone:
          type: string
          readOnly: true
          example: America/New_York
        type:
          type: string
          readOnly: true
        data_retention_in_days:
          type: integer
          description: |
            Number of days to retain lead events. Events outside the retention period are automatically deleted permanently.
        data_truncated_at:
          $ref: '#/components/schemas/Timestamp'
        keen_project_id:
          type: string
          readOnly: true
        keen_read_api_key:
          type: string
          readOnly: true
        keen_write_api_key:
          type: string
          readOnly: true
        pricing_components:
          type: array
          items:
            type: object
          readOnly: true
        billing_type:
          type: string
          enum:
            - contracted
            - self_service
          readOnly: true
        financial_state:
          type: string
          enum:
            - paid
            - unpaid
          description: Only populated when the billing_type is "contracted"
          readOnly: true
        financial_state_updated_at:
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
        lead_ping_enabled:
          type: boolean
          readOnly: true
        product_id:
          type: string
          readOnly: true
          example: lcx
        state:
          type: string
          readOnly: true
        connected_buyers:
          description: List of connected buyers
          readOnly: true
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        connected_sellers:
          type: array
          description: List of connected sellers
          readOnly: true
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        pending_sellers:
          type: array
          description: List of invited pending seller entities
          readOnly: true
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        pending_buyers:
          type: array
          description: List of invited pending buyer entities
          readOnly: true
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        subscriptions:
          type: object
          properties:
            base:
              $ref: '#/components/schemas/FeatureSubscription'
            pro:
              $ref: '#/components/schemas/FeatureSubscription'
            partner:
              $ref: '#/components/schemas/FeatureSubscription'
        features:
          type: object
          properties:
            seller_access:
              type: boolean
            buyer_access:
              type: boolean
            lead_transactions:
              type: boolean
            conversion_feedback:
              type: boolean
            firehose:
              type: boolean
            third_party_add_on_services:
              type: boolean
            real_time_bidding:
              type: boolean
            leadconduit_trustedform_decisions:
              type: boolean
      required:
        - id
    AccountVariables:
      title: Account Variables
      description: |
        Variables prefixed with `account.` are metadata about the account handled the lead. Account variables are created 
        automatically when a lead is submitted.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The unique ID of the account
          example: 64acddadd9b866e066385bd6
        sso_id:
          $ref: '#/components/schemas/ID'
          description: The account's ID global across all ActiveProspect products
        name:
          description: The name of the source
          type: string
          example: A Corporation
    AuthenticatedUser:
      x-tags:
        - Account
      title: User
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: ID of this user
        sso_id:
          type: string
          description: The account's ID global across all ActiveProspect products
          example: 6493820b542ea0521e2a4543
        api_key:
          type: string
          description: The user's API key
          example: 2f1d5f29915b866c7a2fa5de29613104
        superuser:
          type: boolean
          description: Is the user a super user?
          example: false
        user_admin:
          type: boolean
          description: Can the user manage other users and verified domains?
          example: true
        subscription_admin:
          type: boolean
          description: Can the user manage subscriptions to TrustedForm, LeadConduit, and SuppressionList?
          example: true
        role_string:
          type: string
          description: The user's role (unused)
          enum:
            - user
          example: user
        first_name:
          type: string
          description: The user's first name
          example: Jane
        last_name:
          type: string
          description: The user's last name
          example: Doe
        email:
          type: string
          description: The user's email address
          example: janedoe@company.com
        phone:
          type: string
          description: The user's phone number
          example: 512-555-1212
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        products:
          type: array
          description: The list of products available to the account
          items:
            $ref: '#/components/schemas/Product'
          example:
            - id: lcx
              name: LeadConduit
              base_url: https://app.leadconduit.com
              marketing_url: https://activeprospect.com/products/leadconduit/
              subscribed: true
            - id: suppressionlist
              name: SuppressionList
              base_url: https://app.suppressionlist.com
              marketing_url: https://activeprospect.com/products/leadconduit/
              subscribed: true
            - id: trustedform
              name: TrustedForm
              base_url: https://app.trustedform.com
              marketing_url: https://activeprospect.com/products/trustedform/
              subscribed: true
        product_code:
          type: string
          description: The code for the current product
          enum:
            - lcx
            - trustedform
            - suppressionlist
            - account
          x-enumDescriptions:
            lcx: LeadConduit
            trustedform: TrustedForm
            suppressionlist: SuppressionList
          example: lcx
        company_name:
          type: string
        expires:
          $ref: '#/components/schemas/Timestamp'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/UserSubscription'
        zendesk_jwt:
          type: string
      required:
        - id
        - email
        - first_name
        - last_name
    binary-rule:
      title: Binary Rule
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ShortID'
          description: ID for this rule
          example: 1aacd0
        lhv:
          type: string
          description: The required left-hand value to be evaluated ([templating](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/) is supported)
          example: lead.state
        op:
          type: string
          enum:
            - is equal to
            - is not equal to
            - is less than
            - is less than or equal to
            - is greater than
            - is greater than or equal to
            - is included in
            - is not included in
            - includes
            - does not include
            - is between
            - is not between
            - matches pattern
            - does not match pattern
          example: is equal to
          x-enumDescriptions:
            is equal to: Is the [string](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String) (case-insensitive), [number](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number), or [range](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` equal to the `rhv`?
            is not equal to: Inverse of the `is equal to` operator.
            is less than: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` numerically less than the `rhv`?
            is less than or equal to: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` numerically less than or equal to the `rhv`?
            is greater than: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` numerically more than the `rhv`?
            is greater than or equal to: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` numerically more than or equal to the `rhv`?
            is between: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` between the `rhv` [range](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `min` and `max` (inclusive)?
            is not between: Is the [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) or [range average](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `lhv` outside the `rhv` [range](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) `min` and `max` (exclusive)?
            is included in: Is the [string](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String), [number](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number), or [boolean](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Boolean) `lhv` included in the Array of values provided in the `rhv`?
            is not included in: Is the [string](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String), [number](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number), or [boolean](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Boolean) `lhv` missing from the Array of values provided in the `rhv`?
            includes: Does the Array of [strings](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String), [numbers](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number), or [booleans](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Boolean) provided in the `lhv` contain the `rhv`?
            does not include: Is the Array of [strings](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String), [numbers](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number), or [booleans](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Boolean) provided in the `lhv` missing the `rhv`?
          description: |
            Binary operators compare the `lhv` and the `rhv`.
        rhv:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                type: string
          description: The right-hand value to be evaluated ([templating](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/) is supported)
          example: TX
        rule_set:
          $ref: '#/components/schemas/rule-set'
      additionalProperties: false
      required:
        - lhv
        - op
        - rhv
    Cap:
      x-tags:
        - Caps and Limits
      type: object
      description: |
        A cap allows limiting the number of leads sent into or out of a flow. 
        If a lead is successful, it will be counted against the maximum configured leads. 
        If configured, the rule set will be evaluated to determine whether a lead will be counted against the cap.
      properties:
        id:
          description: ID of this cap
          $ref: '#/components/schemas/ID'
          example: 5fd438f91f0d12766e2bfee5
        type:
          type: string
          description: The type of this cap (LeadConduit may eventually support different types of caps)
          enum:
            - volume
        name:
          description: The human-readable name of the cap
          type: string
          example: Monthly leads from TX
        maximum:
          type: number
          description: The number of successful leads that will be accepted
          example: 1200
        duration:
          type: number
          description: The number duration_units for which the cap persists
          minimum: 1
          examples:
            - 1
        duration_units:
          type: string
          description: The unit of time for which the cap persists
          enum:
            - month
            - week
            - day
            - hour
            - minute
        rule_set:
          $ref: '#/components/schemas/rule-set'
          description: This rule set must pass in order for the lead to count against the cap
        caps:
          description: Nested caps evaluated if rules for the parent cap pass
          type: array
          items:
            $ref: '#/components/schemas/Cap'
        time_zone:
          description: The time zone in which cap resets
          type: string
          example: America/New_York
        reason:
          $ref: '#/components/schemas/Template'
          description: 'When the cap is met this is the reason (default: ''Cap reached'')'
        created_at:
          description: Read-only time the cap was created
          type: string
          format: date-time
          example: '2020-11-23T11:41:52Z'
    cap-counter:
      x-tags:
        - Caps and Limits
      title: Cap Counter
      type: object
      description: |
        A cap counter keeps track of the number of leads counted against the cap. The counter has the same ID as the cap
        configuration saved with the flow. Most of the properties of the cap configuration are available on the cap counter, as
        a convenience.
      properties:
        id:
          description: ID of this cap
          $ref: '#/components/schemas/ID'
          example: 5fd438f91f0d12766e2bfee5
        cap_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
        caps:
          description: Nested caps evaluated if rules for the parent cap pass
          type: array
          items:
            $ref: '#/components/schemas/Cap'
        count:
          description: The number of successful leads during the current interval
          type: integer
        duration:
          type: number
          description: The number duration_units for which the cap persists
          minimum: 1
          example: 1
        duration_units:
          type: string
          description: The unit of time for which the cap persists
          enum:
            - month
            - week
            - day
            - hour
            - minute
        expires_at:
          description: Read-only time the cap interval ends
          type: string
          format: date-time
          example: '2020-11-23T11:41:52Z'
        failed_count:
          description: The number of leads that failed because the cap was reached during the current interval
          type: integer
        flow_id:
          description: ID of the flow this cap belongs to
          $ref: '#/components/schemas/ID'
          example: 5fd438f91f0d12766e2bfee5
        maximum:
          type: number
          description: The number of successful leads that will be accepted
          example: 1200
        name:
          description: The human-readable name of the cap
          type: string
          example: Monthly leads from TX
        source_id:
          description: ID of the source this cap belongs to
          $ref: '#/components/schemas/ID'
          example: 5fd438f91f0d12766e2bfee5
        started_at:
          description: Read-only time the cap interval started
          type: string
          format: date-time
          example: '2020-11-23T11:41:52Z'
        step_id:
          description: ID of the step this cap belongs to
          $ref: '#/components/schemas/ShortID'
          example: 5fd438f91f0d12766e2bfee5
        time_zone:
          description: The time zone in which cap resets
          type: string
          example: America/New_York
        type:
          type: string
          description: The type of this cap (LeadConduit may eventually support different types of caps)
          enum:
            - volume
        updated_at:
          type: string
          format: date-time
          example: '2020-11-23T11:41:52Z'
      additionalProperties: false
      required:
        - type
        - maximum
        - duration
        - duration_units
    cap-counters:
      title: Cap Counters
      type: array
      items:
        $ref: '#/components/schemas/cap-counter'
    Caps:
      description: |
        A cap controls the behavior by setting the maximum and the duration. The counter for a cap is kept as a standalone record which shares cap's ID.
      oneOf:
        - type: 'null'
        - type: array
          items:
            $ref: '#/components/schemas/Cap'
          minItems: 1
    Change:
      type: object
      properties:
        action:
          type: string
          description: Action performed
          enum:
            - create
            - update
            - delete
            - changed
            - moved
            - removed
            - added
        target:
          type: string
          description: The target of the change, which could be any property within the model being changed
        delta_path:
          type: string
          description: The path that represents where the change is located within the delta object
        previous:
          type: object
          description: The state of the target object before the change was made
          properties:
            value:
              oneOf:
                - type: string
                - type: array
                  items:
                    type: object
                - type: boolean
            index:
              type: number
        current:
          type: object
          description: The current state of the target object
          properties:
            value:
              oneOf:
                - type: string
                - type: array
                  items:
                    type: object
                - type: boolean
            index:
              type: number
    Changelog:
      x-tags:
        - Changelogs
      type: object
      properties:
        id:
          description: ID of this Change Log
          $ref: '#/components/schemas/ID'
          example: 5fd438f91f0d12766e2bfee5
        action:
          type: string
          description: Action performed
          enum:
            - create
            - update
            - delete
            - changed
            - moved
            - removed
            - added
        changes:
          type: array
          description: An object representing the normalization of the delta object
          items:
            $ref: '#/components/schemas/Change'
        current_revision:
          type: object
          additionalProperties: true
        delta_from_last_revision:
          type: object
          description: An object representing the difference between the previous revision and the latest revision of the model
          additionalProperties: true
        type:
          type: string
          description: The type of resource that was changed.
          enum:
            - flow
            - entity
            - field
            - report
        user:
          description: User information. This will only be present if the user was signed in when the changes were made
          $ref: '#/components/schemas/ChangelogUser'
        created_at:
          description: Read-only time the Change Log was created
          type: string
          format: date-time
          example: '2020-11-23T11:41:52Z'
      required:
        - id
        - type
        - action
        - current_revision
        - delta_from_last_revision
        - changes
        - created_at
    ChangelogUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        api_key:
          type: string
          description: The user's ActiveProspect API key
          example: 2f1d5f29915b866c7a2fa5de29613104
        first_name:
          description: The user's first name
          type: string
        last_name:
          description: The user's last name
          type: string
        email:
          description: The user's email address
          type: string
    Changelogs:
      oneOf:
        - type: 'null'
        - type: array
          items:
            $ref: '#/components/schemas/Changelog'
    Credential:
      x-tags:
        - Account
      type: object
      oneOf:
        - $ref: '#/components/schemas/UserCredential'
        - $ref: '#/components/schemas/TokenCredential'
        - $ref: '#/components/schemas/OauthCredential'
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The ID of the credential which uniquely identifies it
        name:
          description: Friendly name for this credential
          type: string
        type:
          description: 'The type of model changes were performed on: user, token, oauth'
          type: string
        package:
          description: The name of the LeadConduit integration package to which this credential belongs
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Credentials:
      oneOf:
        - type: 'null'
        - type: array
          items:
            $ref: '#/components/schemas/Credential'
          minItems: 1
    DeployResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message for deploying a flow
          example: Your flow was deployed and the most recent changes are now live
    Destination:
      x-tags:
        - Destinations
        - Flows
      type: object
      description: |
        An internal representation of a Prismatic instance.
      properties:
        name:
          description: A customizable name of the destination.
          type: string
          example: Salesforce
        integration_name:
          type: string
          description: The name of the integration as published in the Marketplace.
        integration_icon_url:
          type: string
          description: Pre-signed URL for the integration icon.
        instance_id:
          description: The Prismatic instance ID.
          type: string
        actions:
          description: A list of actions available in the configured instance. These map to Prismatic "flows" within an instance.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the flow, or "action", available in the configured instance. One instance can have multiple flows.
                type: string
                example: Add Lead
              action_id:
                description: The Prismatic flow ID.
                type: string
                example: Add Lead
              webhook_url:
                description: The Prismatic webhook URL. This URL will invoke the Prismatic flow defined by the configured instance.
                type: string
        flow_usages:
          description: |
            Contains data on flows in which the destination is used.
            This field is optional and is **only** included when the `include=flow_usages` query parameter is included in the request.
          type: object
          properties:
            count:
              description: The total number of flows in which the destination is used.
              type: integer
            flows:
              description: A list of flows in which the destination is used.
              type: array
              items:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                    description: The flow ID
                    example: 5fd4371e940df5a34a3888b2
                  name:
                    description: The name of the flow
                    type: string
    Entities:
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/Entity'
        - type: 'null'
      minItems: 1
    Entity:
      x-tags:
        - Entities
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the entity which is displayed throughout LeadConduit's UI
          example: A Corporation
        description:
          type: string
        standard:
          type: boolean
          description: Read-only flag indicating whether this is a built-in entity
          readOnly: true
          example: false
        account:
          oneOf:
            - type: boolean
            - type: 'null'
          description: Read-only flag indicating whether this entity represents another LeadConduit account holder
          readOnly: true
          example: true
        pending:
          type: boolean
          description: Read-only flag indicating whether this entity represents a pending entity waiting for invitation acceptance
          readOnly: true
          example: true
        connected:
          type: string
          enum:
            - seller
            - buyer
            - both
          description: Read-only flag if this Account entity is connected to my account
          readOnly: true
          example: seller
        deprecated:
          type: boolean
          example: false
        see:
          $ref: '#/components/schemas/ID'
          description: The alternative entity ID to be used instead of this deprecated entity
        field_suffix:
          description: The suffix required for all custom fields
          oneOf:
            - type: string
              minLength: 3
              maxLength: 5
              pattern: ^[0-9a-zA-Z]+$
              example: acorp
            - type: 'null'
        invitation_id:
          oneOf:
            - $ref: '#/components/schemas/ID'
            - type: 'null'
          description: The ID of the invitation ID created on Accounts side to reference the entity
        flow_ids:
          description: Array of flow IDs where this entity is listed in the `sources` array (or `null` if the `account` property is `false`
          type: array
          items:
            $ref: '#/components/schemas/ID'
          example:
            - 5fd4371e940df5a34a3888b2
        logo_url:
          description: The logo for this entity
          oneOf:
            - type: string
            - type: 'null'
          format: uri
        module_ids:
          description: Array of integration module IDs that are supported by this entity
          type: array
          items:
            $ref: '#/components/schemas/ModuleID'
        source:
          description: Is this entity a lead source and if so, what kind?
          oneOf:
            - type: 'null'
            - type: string
              enum:
                - form
                - seller
                - other
        recipient:
          description: Is this entity a lead recipient and if so, what kind?
          oneOf:
            - type: 'null'
            - type: string
              enum:
                - buyer
                - crm
                - analytics
                - enhancement
                - esp
                - other
        time_zone:
          description: If this entity represents a buyer or seller with an account, this is the account's time zone
          type: string
          example: America/Los Angeles
        trustedform_certified_vendor:
          description: If this entity represents a seller, is that company a TrustedForm Certified Vendor?
          type: boolean
          example: true
        website:
          description: If this entity represents a buyer or seller, this is the URL to their marketing site
          type: string
          format: uri
        created_at:
          description: The time this entity was created
          type: string
          format: date-time
          readOnly: true
        updated_at:
          description: The time this entity was last modified
          type: string
          format: date-time
          readOnly: true
      additionalProperties: false
      required:
        - name
        - source
        - recipient
        - module_ids
    EntitySummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          readOnly: true
        time_zone:
          type: string
          example: America/New_York
      additionalProperties: false
      required:
        - id
        - name
    Event:
      x-tags:
        - Leads
      type: object
      description: An event tracks what happened with a lead at a particular step in a flow. An event is a self-contained snapshot of the state of the lead at the time the lead visited the step. It contains a full copy of all lead data, along with all data that was appended before that step. Every event contains the below properties.
      properties:
        type:
          type: string
          enum:
            - source
            - recipient
            - filter
            - feedback-received
            - feedback-sent
            - retry
      discriminator:
        propertyName: type
        mapping:
          source: '#/components/schemas/source-event'
          recipient: '#/components/schemas/recipient-event'
          filter: '#/components/schemas/filter-event'
          feedback-received: '#/components/schemas/feedback-received-event'
          feedback-sent: '#/components/schemas/feedback-sent-event'
          retry: '#/components/schemas/retry-event'
      oneOf:
        - $ref: '#/components/schemas/source-event'
        - $ref: '#/components/schemas/recipient-event'
        - $ref: '#/components/schemas/filter-event'
        - $ref: '#/components/schemas/feedback-received-event'
        - $ref: '#/components/schemas/feedback-sent-event'
        - $ref: '#/components/schemas/retry-event'
    event-metrics-interval:
      title: Event Metrics Interval
      example: daily
      anyOf:
        - type: string
        - type: object
          properties:
            name:
              type: string
            units:
              type: string
    event-metrics-timeframe:
      title: Event Metrics Timeframe
      example: this_14_days
      anyOf:
        - $ref: '#/components/schemas/event-metrics-timeframe-bounded'
        - type: string
          example: this_14_days
    event-metrics-timeframe-bounded:
      title: Event Metrics Timeframe Bounded
      type: object
      properties:
        start:
          $ref: '#/components/schemas/Timestamp'
        end:
          $ref: '#/components/schemas/Timestamp'
    EventProperties:
      type: object
      description: An event tracks what happened with a lead at a particular step in a flow. An event is a self-contained snapshot of the state of the lead at the time the lead visited the step. It contains a full copy of all lead data, along with all data that was appended before that step. Every event contains the below properties.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        outcome:
          type: string
          description: The outcome of the event
        reason:
          type: string
          description: The reason for a failure or error outcome
        vars:
          type: object
        host:
          type: string
        start_timestamp:
          description: The number of milliseconds elapsed since epoch at the start of the step processing
          type: integer
        end_timestamp:
          description: The number of milliseconds elapsed since epoch at the end of the step processing
          type: integer
        firehose:
          $ref: '#/components/schemas/Firehose'
        ms:
          description: The number of milliseconds that elapsed while processing the lead
          type: integer
        wait_ms:
          type: integer
          description: The number of milliseconds that LeadConduit spent waiting for all recipients to respond
        overhead_ms:
          description: The number of milliseconds of overhead that LeadConduit added while processing the step
          type: integer
        lag_ms:
          type: integer
        total_ms:
          type: integer
          description: The number of milliseconds that elapsed since the lead was submitted
        handler_version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the lead handler
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The schema version of the event
        cap_reached:
          type: boolean
        flow_ping_limits:
          $ref: '#/components/schemas/PingLimit'
        source_ping_limits:
          $ref: '#/components/schemas/PingLimit'
        ping_limit_reached:
          type: boolean
        expires_at:
          $ref: '#/components/schemas/Timestamp'
          description: The time this event will be automatically deleted from LeadConduit (events are retained for 90 days)
      required:
        - id
        - type
        - outcome
        - reason
    EventQuery:
      description: Query parameters for retrieving events
      type: object
      properties:
        after_id:
          $ref: '#/components/schemas/ID'
          description: Return only events that were created after the one with this ID (exclusive)
        before_id:
          $ref: '#/components/schemas/ID'
          description: Return only events that were created before the one with this ID (exclusive)
        start:
          $ref: '#/components/schemas/Timestamp'
          description: Return only events that were created at or after this time
        end:
          $ref: '#/components/schemas/Timestamp'
          description: Return only events that were created at or before this time
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          description: Rules to select matching events
        include:
          type: array
          items:
            type: string
          description: An array of fields to include. Cannot be used with exclude.
        exclude:
          type: array
          items:
            type: string
          description: An array of fields to exclude. Cannot be used with include.
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          description: The maximum number of events to return (maximum limit is 1000, default 100)
        sort:
          type: string
          description: The results are sorted by date. Use asc to sort by oldest first or desc to sort by newest first. Defaults to desc.
    event-statistic:
      title: Event Statistic
      type: object
      properties:
        source-submitted:
          description: Total number of leads submitted to LeadConduit by a source
          type: integer
        source-success:
          description: Total number of leads submitted to LeadConduit by a source resulting in success (lead was purchased)
          type: integer
        source-failure:
          description: Total number of leads submitted to LeadConduit by a source resulting in failure (lead was not purchased)
          type: integer
        source-error:
          description: Total number of leads submitted to LeadConduit by a source resulting in error
          type: integer
        recipient-submitted:
          description: Total number of leads submitted by LeadConduit to a recipient
          type: integer
        recipient-success:
          description: Total number of leads submitted by LeadConduit to a recipient resulting in success (lead was purchased)
          type: integer
        recipient-failure:
          description: Total number of leads submitted by LeadConduit to a recipient resulting in failure (lead was not purchased)
          type: integer
        recipient-error:
          description: Total number of leads submitted by LeadConduit to a recipient resulting in error
          type: integer
        return-received-submitted:
          description: Total number of returns to LeadConduit by a recipient
          type: integer
        return-received-success:
          description: Total number of returns to LeadConduit by a recipient resulting in success (lead was returned)
          type: integer
        return-received-failure:
          description: Total number of returns to LeadConduit by a recipient resulting in failure (return was denied)
          type: integer
        return-received-error:
          description: Total number of returns to LeadConduit by a recipient resulting in error
          type: integer
        return-sent-submitted:
          description: Total number of returns sent by LeadConduit to a source
          type: integer
        return-sent-success:
          description: Total number of returns sent by LeadConduit to a source resulting in success (lead was returned to the source)
          type: integer
        return-sent-failure:
          description: Total number of returns sent by LeadConduit to a source resulting in failure (return was denied by the source)
          type: integer
        return-sent-error:
          description: Total number of returns sent by LeadConduit to a source resulting in error
          type: integer
        conversion-received-submitted:
          description: Total number of conversions to LeadConduit by a recipient
          type: integer
        conversion-received-success:
          description: Total number of conversions to LeadConduit by a recipient resulting in success (lead was marked converted)
          type: integer
        conversion-received-failure:
          description: Total number of conversions to LeadConduit by a recipient resulting in failure (conversion was denied)
          type: integer
        conversion-received-error:
          description: Total number of conversions to LeadConduit by a recipient resulting in error
          type: integer
        conversion-sent-submitted:
          description: Total number of conversions sent by LeadConduit to a source
          type: integer
        conversion-sent-success:
          description: Total number of conversions sent by LeadConduit to a source resulting in success (lead was reported converted to the source)
          type: integer
        conversion-sent-failure:
          description: Total number of conversions sent by LeadConduit to a source resulting in failure (conversion was denied by the source)
          type: integer
        conversion-sent-error:
          description: Total number of conversions sent by LeadConduit to a source resulting in error
          type: integer
        ping-submitted:
          description: Total count of pings submitted to LeadConduit by a source
          type: integer
        ping-success:
          description: Total number of pings submitted to LeadConduit by a source that result in success
          type: integer
        ping-success-rate:
          description: The percentage of submitted pings that resulted in success
          type: integer
        ping-win-rate:
          description: The percentage of pings submitted by a source that resulted in a source submission
          type: integer
        cost:
          description: The total cost in USD for the leads purchased as determined by the source pricing configuration
          type: integer
        revenue:
          description: The total revenue in USD for leads sold as determined by recipient pricing configuration
          type: integer
        profit:
          description: The difference between `revenue` and `cost`
          type: integer
        cost-per-conversion-received-success:
          description: The cost in USD for each successful conversion that occurred for the leads submitted during the specified timeframe.
          type: integer
        avg-cost-per-lead:
          description: The average cost in USD paid per lead calculated by dividing cost by the number of good leads (`source-submitted-success` minus `return-sent-success`)
          type: integer
        avg-revenue-per-lead:
          description: The average revenue in USD received per lead calculated by dividing `revenue` by the number of good leads (`recipient-submitted-success` minus `return-received-success`)
          type: integer
    event-statistics:
      title: Event Statistics
      type: array
      items:
        $ref: '#/components/schemas/event-statistic'
    FeatureSubscription:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        state:
          type: string
          enum:
            - active
            - inactive
        created_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time at which the feature subscription was created
        updated_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time at which the feature subscription was most recently updated
        active_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time at which the feature subscription became active
        inactive_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time at which the feature subscription became inactive
        product_offering_id:
          $ref: '#/components/schemas/ID'
        product_offering_component:
          type: string
          enum:
            - partner
            - base
            - addons
            - pro
      additionalProperties: true
      required:
        - id
        - product_offering_component
        - product_offering_id
        - state
    Feedback:
      description: |
        Feedback specifies the configuration for receiving and sending feedback
        about a lead. When receiving feedback from a recipient, the `rule_set`
        must pass. If it does not, a "failure" Feedback Received Event is
        created. When sending feedback to a source, the `rule_set` must pass. If
        it does not, a " skip" Feedback Sent Event is created.
      properties:
        rule_set:
          description: If the rules fail the feedback is not performed
          $ref: '#/components/schemas/rule-set'
        integration:
          description: The integration to be used for the feedback
          $ref: '#/components/schemas/Integration'
      additionalProperties: false
      required:
        - integration
    feedback-received-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Feedback Received Event
          type: object
          description: |
            A feedback-received event is created when lead feedback is provided by a recipient. The feedback configuration must be
            provided on the recipient step. When feedback is received, all variables are copied from the original recipient event.

            When feedback is configured to be sent to the source, the feedback-received event's `outcome` and `reason` are copied
            from the feedback-sent event. In other words, if the source refuses the feedback, the recipient will receive a "failure"
            outcome in response to the feedback call.
          properties:
            type:
              description: Recorded after a recipient provides feedback on a lead previously sent with a recipient step
              type: string
              enum:
                - feedback-received
            outcome:
              enum:
                - success
                - failure
                - error
              x-enumDescriptions:
                success: The recipient was notified in the response that the feedback was accepted
                failure: The recipient was notified in the response that the feedback was rejected
                error: The recipient was notified in the response that an error occurred while processing the feedback
            vars:
              $ref: '#/components/schemas/FeedbackVariables'
            module_id:
              $ref: '#/components/schemas/ModuleID'
              description: The integration module ID configured for the recipient
            recipient_event_id:
              $ref: '#/components/schemas/ID'
              description: The ID of the recipient event used to provide the feedback
            step_id:
              type: string
              description: The ID flow step that originally sent the lead to the recipient
            feedback:
              $ref: '#/components/schemas/Feedback'
            request:
              $ref: '#/components/schemas/HttpRequest'
              description: The feedback HTTP request
            response:
              $ref: '#/components/schemas/HttpResponse'
              description: The feedback HTTP response
    feedback-sent-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Feedback Sent Event
          type: object
          description: |
            A feedback-sent event is created when lead feedback is sent to a source. The feedback configuration must be provided on
            the source in the flow. When feedback is sent, all lead variables are copied from the original recipient event.
          properties:
            type:
              description: Recorded after a feedback is sent to a source as a consequence of the recipient providing feedback
              type: string
              enum:
                - feedback-sent
            outcome:
              enum:
                - success
                - failure
                - error
              x-enumDescriptions:
                success: The source accepted the feedback
                failure: The source rejected the feedback
                error: An error occurred while attempting to communicate with the source
            vars:
              $ref: '#/components/schemas/FeedbackVariables'
            module_id:
              $ref: '#/components/schemas/ModuleID'
              description: The integration module ID configured for the recipient
            recipient_event_id:
              $ref: '#/components/schemas/ID'
              description: The ID of the recipient event used to provide the feedback
            step_id:
              type: string
              description: The ID flow step that originally sent the lead to the recipient
            feedback:
              $ref: '#/components/schemas/Feedback'
            request:
              $ref: '#/components/schemas/HttpRequest'
              description: The feedback HTTP request
            response:
              $ref: '#/components/schemas/HttpResponse'
              description: The feedback HTTP response
    FeedbackVariables:
      title: Feedback Variables
      description: |
        All variables from the most recent event for the lead receiving feedback. Additionally contains
        feedback metadata at `feedback.`.
      type: object
      patternProperties:
        ^feedback\.:
          $ref: '#/components/schemas/VariableFeedbackMetadata'
        ^submission\.:
          $ref: '#/components/schemas/VariableSubmissionMetadata'
        ^account\.:
          $ref: '#/components/schemas/VariableAccountMetadata'
        ^flow\.:
          $ref: '#/components/schemas/VariableFlowMetadata'
        ^source\.:
          $ref: '#/components/schemas/VariableSourceMetadata'
        ^recipient\.:
          $ref: '#/components/schemas/VariableRecipientMetadata'
        ^lead\.:
          $ref: '#/components/schemas/VariableLeadData'
        ^.+\.:
          $ref: '#/components/schemas/VariableAppendedData'
      additionalProperties: false
    Field:
      x-tags:
        - Fields
      type: object
      properties:
        id:
          type: string
          description: The required alphanumeric identifier of the field. Custom fields have an account-specific suffix (e.g. '_acme')
          examples:
            - first_name
            - last_name
            - email
            - phone_1
        name:
          type: string
          description: The human-readable name of the field
          examples:
            - First Name
            - Last Name
            - Email
            - Phone 1
        type:
          description: The data [type](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/) of this field
          type: string
          enum:
            - boolean
            - city
            - credential
            - date
            - email
            - first_name
            - gender
            - last_name
            - number
            - phone
            - postal_code
            - range
            - ssn
            - state
            - street
            - string
            - time
            - trustedform_url
            - url
          x-enumDescriptions:
            boolean: A [boolean](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Boolean) is a value that can be interpreted as true or false
            city: The name of a [city](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/City) as part of an address
            credential: A [credential](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Credential) or other sensitive value. Credentials are not written to the database.
            date: A [date](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Date) expressed as a year, month, and day
            dob: A [date of birth](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Date-Of-Birth) expressed as a year, month, and day
            email: An [email address](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Email)
            first_name: A [first name](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/First-Name) value
            gender: A value representing [gender](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Gender)
            last_name: A [first name](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Last-Name) value
            number: A [numeric](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Number) value
            phone: A [US telephone number](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Phone)
            postal_code: The [postal code](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Postal-Code) portion of an address
            range: A [numeric range](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Range) such as 1-10
            ssn: A US [Social Security Number](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/SSN). Not written to the database.
            state: The [state](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/State) portion of an address
            street: The [street](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Street) portion of an address
            string: A generic [string](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/String) value
            time: A [date-time](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/Time) value
            trustedform_url: The [TrustedForm Certificate URL](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/TrustedForm-URL)
            url: A generic [URL](https://developers.activeprospect.com/docs/leadconduit/api/tag/Types/#tag/Types/section/URL)
        description:
          type: string
          description: The textual description of the purpose of this field
        standard:
          description: Read-only flag indicating whether this is a built-in LeadConduit field
          type: boolean
        aggregate:
          type: boolean
        deprecated:
          description: The flag indicating that this field should no longer be used
          type: boolean
        see:
          $ref: '#/components/schemas/ID'
          description: The alternative field ID to be used instead of this deprecated field
        created_at:
          description: Read-only time the field was created
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          description: Read-only time the field was last updated
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - type
        - name
    filter-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Filter Event
          type: object
          description: |
            A filter event is created when a lead is processed by a filter step.
          properties:
            type:
              description: Recorded after a filter step in a flow is processed
              type: string
              enum:
                - filter
            outcome:
              enum:
                - continue
                - stop
                - error
              x-enumDescriptions:
                success: The filter's rule set did not match the lead, and the flow continued
                failure: The filter's rule set matched the lead, and the flow stopped
                error: An unhandled error occurred while processing the filter step (this indicates a problem with LeadConduit)
            reason:
              type: string
              description: Set by evaluating the `reason` template of the filter step.
            vars:
              $ref: '#/components/schemas/FilterVariables'
            rule_set:
              $ref: '#/components/schemas/rule-set'
              description: The rule set configured on the recipient step when the lead was processed
    FilterStep:
      title: Filter Step
      type: object
      description: |
        A filter step is used to stop processing a lead from advancing to the
        next flow step. This is conceptually similar to an email inbox filter.
        If the lead matches the rules then the flow is stopped, which
        effectively filters out the lead. When a filter step stops the flow, the
        source receives an immediate response and no further steps are
        processed.
      properties:
        type:
          description: The type of the step (always `filter`)
          type: string
          enum:
            - filter
        id:
          description: ID for this step
          $ref: '#/components/schemas/ShortID'
        description:
          description: A brief description of what this filter does
          type: string
          maxLength: 120
        notes:
          type: string
          maxLength: 2000
        reason:
          description: |
            When the outcome is `failure` or `error`, this is the reason to
            provide to the source
          type: string
        outcome:
          description: |
            When the flow stops, `success`, `failure` or `error` is returned to
            the source that submitted the lead
          type: string
        rule_set:
          description: The flow stops when the rules match the lead
          $ref: '#/components/schemas/rule-set'
        enabled:
          description: |
            Whether this step should be run when processing a lead or not
          type: boolean
      additionalProperties: false
      required:
        - type
        - outcome
        - rule_set
    FilterVariables:
      title: Filter Variables
      description: |
        All data available at the time LeadConduit started processing this event
      type: object
      patternProperties:
        ^submission\.:
          $ref: '#/components/schemas/VariableSubmissionMetadata'
        ^account\.:
          $ref: '#/components/schemas/VariableAccountMetadata'
        ^flow\.:
          $ref: '#/components/schemas/VariableFlowMetadata'
        ^source\.:
          $ref: '#/components/schemas/VariableSourceMetadata'
        ^recipient\.:
          $ref: '#/components/schemas/VariableRecipientMetadata'
        ^lead\.:
          $ref: '#/components/schemas/VariableLeadData'
        ^.+\.:
          $ref: '#/components/schemas/VariableAppendedData'
      additionalProperties: false
    Firehose:
      type: object
      properties:
        credential_id:
          description: The ID of the credential storing the AWS keys
          $ref: '#/components/schemas/ID'
        enabled:
          type: boolean
          description: Is the firehose enabled for this flow?
        bucket:
          type: string
          description: The name of the s3 bucket
        prefix:
          type: string
          description: Optional. If provided, files written to s3 will be written as &lt;prefix>/&lt;lead id>/&lt;event id>.json
    Flow:
      x-tags:
        - Flows
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: some custom description
        name:
          type: string
          description: The name of the flow
          minLength: 1
          example: Sales Leads
        errors:
          type: object
          description: Errors preventing this flow from being saved
          readOnly: true
        enabled:
          type: boolean
          description: Disabling a flow will prevent any processing of lead submissions. Submission will result in an error outcome.
          example: true
        fields:
          type: array
          description: The list of fields (IDs) representing the lead to be processed by this flow.
          items:
            type: string
          example:
            - first_name
            - last_name
            - email
            - phone_1
            - address_1
            - city
            - state
            - postal_code
            - trustedform_cert_url
        caps:
          $ref: '#/components/schemas/Caps'
          description: Caps on leads submitted into this flow from any source. These caps will be processed before caps set on a source.
        acceptance_criteria:
          $ref: '#/components/schemas/acceptance-criteria'
          description: A submitted lead that fails an acceptance criteria rule will be rejected. Lead submission will result in a failure outcome.
        pricing:
          $ref: '#/components/schemas/Pricing'
          description: |
            This pricing configuration applies to all leads submitted to this flow. Pricing determines the value of 
            the `purchase_price` and `cost` property on the source event recorded when a lead is submitted. 

            Each price is evaluated and the last price for which all rules match will determine the amount used
            for the `purchase_price` and `cost`. If none of these prices match for a particular lead, source pricing
            will be evaluated. If no price matches, the price properties on the source event will be set to `0`.
        list_checks:
          $ref: '#/components/schemas/ListChecks'
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/Destination'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
        steps:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/FilterStep'
              - $ref: '#/components/schemas/RecipientStep'
        ping_enabled:
          type: boolean
          default: false
        ping_limits:
          $ref: '#/components/schemas/PingLimits'
        pricing_service:
          $ref: '#/components/schemas/PricingServiceConfiguration'
        firehose:
          type: object
          properties:
            credential_id:
              $ref: '#/components/schemas/ID'
            bucket:
              type: string
              pattern: ^(?=^.{3,63}$)(?!^(\d+\.?)+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9]))$
            prefix:
              type: string
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - credential_id
            - bucket
            - enabled
        created_at:
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
        updated_at:
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
      additionalProperties: false
      required:
        - enabled
        - name
        - fields
        - sources
        - steps
    FlowVariables:
      title: Flow Variables
      description: |
        Variables prefixed with `flow`. are metadata about the flow that
        handled the lead. Flow variables are created automatically when a lead
        is submitted.
      type: object
      properties:
        id:
          description: The unique ID of the flow
          $ref: '#/components/schemas/ID'
        name:
          description: The name of the flow
          type: string
    Headers:
      type: object
      patternProperties:
        '[A-Za-z0-9_\\-~\\{\\}]+':
          type: string
          minLength: 1
      additionalProperties: false
    HttpRequest:
      type: object
      properties:
        method:
          type: string
          description: HTTP request method
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
            - OPTIONS
          example: POST
        uri:
          type: string
          description: The full URI
          format: uri
          example: https://app.leadconduit.com/flows/5fd4371e940df5a34a3888b2/sources/6369a0e534c9d4ebe142e0ef/submit
        version:
          type: string
          description: The HTTP version used
          example: '1.1'
        headers:
          $ref: '#/components/schemas/Headers'
          description: The headers sent on the request
          example:
            Content-Type: application/json
            Accept: application/json
        body:
          type: string
          description: The contents of the request body
          example: '{"email":"johndoe@email.com","phone_1":"5127891111"}'
        timestamp:
          type: integer
          description: The number of milliseconds elapsed since epoch immediately prior to sending the request
      required:
        - method
        - uri
        - version
        - headers
        - body
        - timestamp
      additionalProperties: false
    HttpResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 201
        status_text:
          type: string
          description: The textual representation of the status
          format: uri
          example: Created
        version:
          type: string
          description: The HTTP version used
          example: '1.1'
        headers:
          $ref: '#/components/schemas/Headers'
          description: The headers sent in the response
          example:
            Content-Type: application/json
            Accept: application/json
        body:
          type: string
          description: The contents of the response body
          example: '{"outcome":"success","lead":{"id":"63cc6f0e55254d7d1c4c3037"}}'
        timestamp:
          type: integer
          description: The number of milliseconds elapsed since epoch immediately after reading the response body
      required:
        - method
        - uri
        - version
        - headers
        - body
        - timestamp
    ID:
      type: string
      description: 24 character alpha-numeric BSON identifier
      pattern: ^[0-9a-fA-F]{24}$
      readOnly: true
      example: 5fd4371e940df5a34a3888b2
    Integration:
      type: object
      properties:
        module_id:
          description: |
            A pointer to the integration code to use for this integration
          $ref: '#/components/schemas/ModuleID'
        mappings:
          description: |
            The mappings to apply to lead data when interacting with this
            integration
          type: array
          items:
            $ref: '#/components/schemas/Mapping'
      additionalProperties: false
      required:
        - module_id
    IntegrationModule:
      description: |
        An integration module is a pointer to the code that executes an
        individual inbound or outbound integration. A module is contained in an
        integration package. For example, the Salesforce [integration
        package](#integration-package) contains two individual
        integration modules: Add Lead and Create Contact.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the integration module
          example: leadconduit-salesforce.outbound.create_contact
        type:
          description: The type of the integration module
          type: string
          examples:
            - inbound
            - delivery
            - marketplace enhancement
            - enhancement
            - recipient
            - source
        direction:
          description: The type of the integration module
          type: string
          enum:
            - inbound
            - outbound
        name:
          description: The name of the integration inside the integration module
          type: string
        description:
          type: string
        tag:
          type: string
        feedback:
          type: boolean
        median_wait_ms:
          type: number
        pricing:
          type: object
          properties:
            type:
              type: string
            unit:
              type: string
            transaction:
              type: boolean
            tiers:
              type: array
              items:
                type: object
                properties:
                  unit_price:
                    type: number
                  start_qty:
                    type: number
                  end_qty:
                    type: number
        request_variables:
          description: The fields provided by an inbound integration, or fields provided to an outbound integration
          type: array
          items:
            $ref: '#/components/schemas/IntegrationVariable'
        response_variables:
          description: The fields returned by an inbound integration, or fields appended by an outbound integration
          type: array
          items:
            $ref: '#/components/schemas/IntegrationVariable'
        editable:
          description: If the module allows configuration updates though its UI wizard
          type: boolean
    IntegrationPackage:
      description: |
        An integration package contains multiple integration modules.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the integration package
          example: leadconduit-salesforce
        provider:
          type: string
          description: The name of the provider of the integration package
          example: Salesforce
        description:
          description: The human readable description of the integration package
          type: string
        name:
          description: The name of the package (i.e. Salesforce)
          type: string
        paths:
          description: An array of pointers to each integration inside this package
          type: array
          items:
            type: string
        link:
          description: The provider's homepage
          type: string
        ui:
          description: Whether this integration supports a rich user experience
          type: boolean
        images:
          type: boolean
        version:
          description: The semantic version of the package containing this integration
          type: string
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationModule'
    IntegrationVariable:
      description: |
        Variables are used when communicating with integrations.

        Outbound integrations have a list of request variables. These are the
        variables provided to the integration for the purpose of executing an
        outbound integration as part of a [recipient step](#recipient-step).
        Outbound integrations also provide a list of response variables. These
        are the variables the integration provides after the integration is
        executed. They are appended to the full list of [lead
        variables](#lead-variable) available while handling a lead.

        Inbound integrations have a list of request variables. These are the
        variables that are populated by the inbound integration when a lead is
        submitted to LeadConduit. These variables are [mapped](#mapping) and
        the results are stored in the [lead variables](#lead-variable) for use
        while processing the lead. The response variables for an inbound
        integration represent the data returned to the submitting party by the
        inbound integration after lead processing has completed.
      type: object
      properties:
        name:
          description: The identifier of the variable (i.e. lead.first_name)
          type: string
        description:
          description: The human readable description of the variable
          type: string
        required:
          description: Whether or not the variable is required by the integration
          type: boolean
        type:
          description: The type of data contained in the variable
          type: string
      required:
        - name
    InvitationRequest:
      x-tags:
        - Invitation
      type: object
      properties:
        email:
          type: string
          description: invite to connect email
          example: mike.jones@example.com
        description:
          type: string
          description: invitation description to be sent in the email
          example: I invite you to connect to my account
      required:
        - email
    InvitationSuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Message in case the invitation was sent successfully
          example: Invitation was sent successfully
        entity:
          type: object
          $ref: '#/components/schemas/Entity'
          description: Pending source or recipient entity created with the invitation id returned from Accounts invitations
    InvitationErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
    lead-search-result:
      title: Lead Search Result
      type: object
      description: |
        A lead search result is returned when searching for a lead. The
        response from the `/search/leads` endpoint contains the total number of
        matching leads and an array of hits, where each hit is a lead search
        result. Each lead search result contains the following properties
      properties:
        lead_id:
          $ref: '#/components/schemas/ID'
          description: Unique ID of the lead
        flow_id:
          $ref: '#/components/schemas/ID'
          description: Unique ID of the flow
        flow_name:
          description: Name of the flow
          type: string
          minLength: 1
          example: Sales Leads
        source_id:
          $ref: '#/components/schemas/ID'
          description: Unique ID of the source
        source_name:
          description: Name of the source
          type: string
          example: A Corporation
        first_name:
          description: First name
          type: string
          example: George
        last_name:
          description: Last name
          type: string
          example: Washington
        email:
          description: Email address
          type: string
          example: georgew@gmail.com
        phone_1:
          description: Phone number
          type: string
          example: '5125551212'
        phone_2:
          description: Alternate phone number
          type: string
          example: '5125552222'
        address_1:
          description: Street address
          type: string
          example: 123 Main street
        city:
          description: City
          type: string
          example: Austin
        postal_code:
          description: Zip code
          type: string
          example: '78704'
        reference:
          description: Vendor specific information
          type: string
          example: '1990118214561'
        state:
          description: State abbreviation
          type: string
          example: TX
        submission_timestamp:
          description: Time the lead was submitted
          $ref: '#/components/schemas/Timestamp'
        highlight:
          description: |
            Object containing properties for each matching field. The values of
            the properties are arrays of the matching text, wrapped in `<em>
            tags
          type: object
          additionalProperties: true
        latest_event:
          description: Last event recorded for this lead
          $ref: '#/components/schemas/recipient-event'
    LeadVariables:
      type: object
      title: Lead Variables
      description: |
        Variables prefixed with `lead.` are lead variables. Lead variables are
        created when a lead is submitted by a source to a flow. These variables
        typically contain data that was collected from the consumer on a web
        form.

        Each variable name corresponds to a
        [field](https://developers.activeprospect.com/docs/leadconduit/api/tag/Fields/)
        ID. If the source submits a piece of data and the matching field ID has
        not been added to the flow, then a variable with that data will not be
        created. If the source needs to submit data using a parameter that does
        not have a matching field name, then a mapping
        must be added to map the source's parameter to the field name. For
        example, if a source submits `fname=Joe` then a mapping must be added
        in order to create the `lead.first_name` variable with the value "Joe".

        For a list of all possible lead variables that are available "out of
        the box" in LeadConduit, simply prepend `lead.` to any of the standard
        field IDs.
      additionalProperties: true
    ListCheck:
      type: object
      properties:
        value:
          description: Is this value on the list? ([templating](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/) is supported)"
          type: string
        list_name:
          description: The name of the SuppressionList list to check
          type: string
          minLength: 1
        lookback:
          anyOf:
            - description: Only query for the value in the list this far back
              type: 'null'
            - description: Only query for the value in the list this far back
              type: object
              properties:
                value:
                  description: The number of units that define the look-back window
                  type: number
                interval:
                  description: Each unit defined in the `value` is one of these durations
                  type: string
                  enum:
                    - year
                    - month
                    - week
                    - day
                    - hour
                    - minute
              additionalProperties: false
              required:
                - value
                - interval
    ListChecks:
      description: |
        Check the lead against SuppressionList lists to see if it's a duplicate, and existing customer, or is on the
        do-not-call list.
      type: object
      properties:
        duplicate:
          $ref: '#/components/schemas/ListCheck'
          description: Query a SuppressionList to determine if the lead is a on the duplicate list (use `suppressionlist.is_duplicate` rules)
          example:
            value: '{{lead.phone}}'
            list_name: duplicates
            lookback:
              value: 7
              interval: day
        existing_customer:
          $ref: '#/components/schemas/ListCheck'
          description: Query a SuppressionList to determine if the lead is a on the list of existing customers (use `suppressionlist.is_existing_customer` rules)
          example:
            value: '{{lead.email}}'
            list_name: customer_emails
            lookback: null
        dnc:
          $ref: '#/components/schemas/ListCheck'
          description: Query a SuppressionList to determine if the lead is on the do-not-call list (use `suppressionlist.is_dnc` rules)
          example:
            value: '{{lead.phone}}'
            list_name: do_not_call
            lookback: null
      additionalProperties: false
    Mapping:
      description: |
        A mapping is a rule-based translation that can be applied when a lead
        is submitted from a source or applied when submitting a lead to a
        recipient.
      type: object
      properties:
        id:
          description: ID for this mapping
          $ref: '#/components/schemas/ShortID'
        property:
          description: The name of the variable to set
          type: string
          minLength: 1
        value:
          description: The value to set
          oneOf:
            - type: string
            - type: number
            - type: 'null'
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: 'null'
              minItems: 1
        rule_set:
          description: Only apply the mapping if this rule set passes
          $ref: '#/components/schemas/rule-set'
      additionalProperties: false
      required:
        - property
        - value
    ModuleID:
      type: string
    NotAuthorized:
      type: object
      properties:
        error:
          type: string
          example: not authorized
    OauthCredential:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The ID of the credential which uniquely identifies it
        name:
          description: Friendly name for this credential
          type: string
        type:
          description: 'The type of model changes were performed on: user, token, oauth'
          type: string
          enum:
            - oauth1
            - oauth2
        package:
          description: The name of the LeadConduit integration package to which this credential belongs
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        access_token:
          description: The OAuth access token to use to connect
          type: string
          minLength: 1
        refresh_token:
          description: The OAuth refresh token to use to get a new access token
          type: string
          minLength: 1
        user:
          description: The user the credential belongs to.
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            email:
              type: string
            phone:
              type: string
        org:
          description: The organization the credential belongs to
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            name:
              type: string
            prefix:
              type: string
        expires_at:
          description: The time epoch seconds at which the token will expire
          type: integer
          format: int64
      required:
        - id
        - name
        - type
        - package
        - access_token
      additionalProperties: true
    PingLimit:
      x-tags:
        - Caps and Limits
      title: Ping Limit
      description: The ping limit configuration is defined in a flow on a source, or directly on the flow itself. The configuration controls the behavior of the ping limit by setting the maximum and the duration. The counter for a ping limit is kept as a standalone record which shares ping limit's ID.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The human-readable name of the ping limit
        maximum:
          type: integer
          description: The number of pings that will be accepted
        duration:
          type: integer
          description: The number duration_units the ping limit persists for
        duration_units:
          type: string
          description: 'The unit of time the ping limit persists for: minute, hour, day, week, or month'
        time_zone:
          type: string
          description: The time zone in which ping limit resets
          example: America/New_York
        created_at:
          $ref: '#/components/schemas/Timestamp'
          description: Read-only time the ping limit was created
          readOnly: true
    PingLimit-counter:
      x-tags:
        - Caps and Limits
      title: Ping Limit Counter
      type: object
      description: |
        A ping limit counter keeps track of the number of pings counted against the ping limit. The counter has the same ID as
        the ping limit configuration saved with the flow. Most of the properties of the ping limit configuration are available
        on the ping limit counter, as a convenience.
      properties:
        id:
          $ref: '#/components/schemas/ID'
          example: 6402715c40926f93753580d9
        name:
          type: string
          description: The human-readable name of the ping limit
        failed_count:
          type: integer
          description: The number of leads that failed during the current interval
        flow_id:
          $ref: '#/components/schemas/ID'
        source_id:
          $ref: '#/components/schemas/ID'
          description: The entity of the flow source if the limit is set on a source
        maximum:
          type: integer
          description: The number of pings that will be accepted
        duration:
          type: integer
          description: The number duration_units the ping limit persists for
        duration_units:
          type: string
          description: 'The unit of time the ping limit persists for: minute, hour, day, week, or month'
        time_zone:
          type: string
          description: The time zone in which ping limit resets
          example: America/New_York
        started_at:
          description: Read-only time the ping limit interval started
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
        expires_at:
          description: Read-only time the ping limit interval ends
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
    PingLimits:
      title: Ping Limits
      type: array
      items:
        $ref: '#/components/schemas/PingLimit'
    Price:
      description: |
        A price determines the `purchase_price` or `sale_price` for a lead. If
        all rules in the `rule_set` pass, then the appropriate price property
        will be set equal to the `amount`. When more than one price is
        specified, the last matching price will be used to set the price
        property on the event.
      type: object
      properties:
        id:
          description: |
            ID of this counter (matches the ID of the corresponding cap
            configuration)
          $ref: '#/components/schemas/Price'
        amount:
          description: The price of the lead in USD
          type: number
          exclusiveMinimum: 0
        rule_set:
          description: |
            The rule set which must pass in order for this price to be
            considered
          $ref: '#/components/schemas/rule-set'
      required:
        - amount
      additionalProperties: false
    Pricing:
      description: |
        A pricing configuration determines the value of the `purchase_price`
        property on source events or the value of the `sale_price` property on
        recipient events. Consequently, it also determines the `cost` and
        `revenue` properties on source and recipient events. These properties
        can be reported on via the statistics API and the reporting API. If no
        pricing is configured, then the `purchase_price` and `sale_price`
        properties will be set to `0`.

        Pricing can be set on sources in a flow, the flow itself, or on any
        recipient step in a flow.

        A pricing is primarily an array of prices. Each price is evaluated and
        the last price for which all rules match will determine the amount used
        for the `purchase_price` or `sale_price`. If no prices match for a
        particular lead, the price properties will be set to `0`.

        If you wish the source or recipient to specify the price, then
        `override` property on the pricing must be set to `true`.  When
        `override: true`, the price properties on the associated event will be
        set to whatever amount is provided by the source or recipient. The
        `prices` array must be empty, null, or undefined if `override: true`.
      type: object
      properties:
        override:
          description: |
            Allows a source or a recipient to specify the price rather than
            relying on `prices`
          type: boolean
        prices:
          description: The list of prices to evaluate for each lead
          type: array
          items:
            $ref: '#/components/schemas/Price'
      additionalProperties: false
    PricingServiceConfiguration:
      description: |
        The configuration required on a Source or Flow to define a Pricing Service for lead pricing.
      type: object
      properties:
        service_id:
          $ref: '#/components/schemas/ID'
        fallback_price:
          type: number
      required:
        - service_id
        - fallback_price
      additionalProperties: false
    PricingService:
      description: |
        An external service which returns a price for a lead.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        integration:
          $ref: '#/components/schemas/Integration'
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - name
      additionalProperties: false
    Product:
      type: object
      description: A product to which an account can subscribe
      properties:
        id:
          type: string
          enum:
            - lcx
            - trustedform
            - suppressionlist
            - account
          x-enumDescriptions:
            lcx: LeadConduit
            trustedform: TrustedForm
            suppressionlist: SuppressionList
        name:
          type: string
        base_url:
          type: string
          description: URL to the product application
        marketing_url:
          type: string
          description: URL to the product marketing site
        subscribed:
          type: boolean
          description: Is the account subscribed to this product?
      required:
        - id
        - name
    recipient-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Recipient Event
          type: object
          description: |
            When a lead is processed by a recipient step, the associated integration is resolved using
            the `module_id` and invoked. The integration contacts the recipient's server and determines the `outcome` and `reason` 
            for the call. Different integrations determine outcome in different ways, so it's important to know what `success`
            or `failure` mean for a particular integration.
          properties:
            type:
              description: Recorded after a lead is sent to a recipient using a recipient step in a flow
              type: string
              enum:
                - recipient
            outcome:
              enum:
                - success
                - failure
                - error
                - skip
              x-enumDescriptions:
                success: The recipient accepted the lead
                failure: The recipient rejected the lead
                error: An error occurred while attempting to communicate with the recipient
                skip: The recipient step was skipped due to failure the rule set or cap having been met
            vars:
              $ref: '#/components/schemas/RecipientVariables'
            step_id:
              type: string
              description: The id of the step in the flow associated with this event
            caps:
              $ref: '#/components/schemas/Caps'
            caps_reached:
              type: boolean
              description: One or more of the recipient caps were met
            key:
              type: string
              description: The property name on the event where appended data is stored
            cost:
              type: number
              format: double
              description: The amount paid for the purchase of this lead
            purchase_price:
              type: number
              format: double
              description: The amount paid for the purchase of this lead
            sale_price:
              type: number
              format: double
              description: The revenue received for the sale of this lead
            revenue:
              type: number
              format: double
              description: The difference between the purchase price and the sale price
            module_id:
              $ref: '#/components/schemas/ModuleID'
            credential:
              $ref: '#/components/schemas/Credential'
            credential_updated:
              type: boolean
              description: Whether the credential used by the integration was refreshed
            package_version:
              $ref: '#/components/schemas/SemanticVersion'
            rule_set:
              $ref: '#/components/schemas/rule-set'
              description: 'The rule set configured on the recipient step when the lead was processed '
            mappings:
              type: array
              description: The mappings applied while invoking the integration
              items:
                $ref: '#/components/schemas/Mapping'
            pricing:
              $ref: '#/components/schemas/Pricing'
              description: The pricing configuration applied to this recipient
            transactions:
              $ref: '#/components/schemas/Transactions'
            wait_ms:
              type: integer
              description: The number of milliseconds that LeadConduit spent waiting the recipient to respond
            total_ms:
              type: integer
              description: 'The number of milliseconds that elapsed since the lead was submitted '
    RecipientStep:
      title: Recipient Step
      type: object
      description: |
        A recipient step is used to send leads out of LeadConduit. It is used to connect with add-on services or to 
        invoke any outbound integration.
      properties:
        type:
          type: string
          enum:
            - recipient
        id:
          $ref: '#/components/schemas/ShortID'
        description:
          type: string
          maxLength: 120
        notes:
          type: string
          maxLength: 2000
        entity:
          $ref: '#/components/schemas/EntitySummary'
        integration:
          $ref: '#/components/schemas/Integration'
        rule_set:
          $ref: '#/components/schemas/rule-set'
        feedback:
          $ref: '#/components/schemas/Feedback'
        caps:
          $ref: '#/components/schemas/Caps'
        pricing:
          $ref: '#/components/schemas/Pricing'
        enabled:
          type: boolean
        retry_enabled:
          type: boolean
      additionalProperties: false
      required:
        - type
        - entity
        - integration
    RecipientVariables:
      title: Recipient Variables
      description: |
        All data available at the time LeadConduit starts processing the recipient step. The following
        additional data will be added to the vars for the purposes of processing this step.
        * `price` — The price to be paid to the recipient
        * `purchase_price` - The cost of the lead paid to the source
        * `event_id` - The identifier of this event (so it can be sent to the recipient for feedback)
        * `recipient` — The `id` and `name` of the recipient
      type: object
      properties:
        price:
          type: number
          description: The price to be paid to the recipient
        purchase_price:
          type: number
          description: The cost of the lead paid to the source
        event_id:
          $ref: '#/components/schemas/ID'
          example: 636999a5a28de89048cd16fc
      patternProperties:
        ^recipient\.:
          $ref: '#/components/schemas/VariableRecipientMetadata'
        ^submission\.:
          $ref: '#/components/schemas/VariableSubmissionMetadata'
        ^account\.:
          $ref: '#/components/schemas/VariableAccountMetadata'
        ^flow\.:
          $ref: '#/components/schemas/VariableFlowMetadata'
        ^source\.:
          $ref: '#/components/schemas/VariableSourceMetadata'
        ^lead\.:
          $ref: '#/components/schemas/VariableLeadData'
        ^.+\.:
          $ref: '#/components/schemas/VariableAppendedData'
      additionalProperties: false
    Report:
      x-tags:
        - Reports
      description: |
        A report is a named definition of criteria (columns, rules, group_bys)
        which is stored. A stored report can be run for a given timeframe,
        producing the report results. The results are a count of the events for
        each column in that timeframe that match the rules and which are
        optionally grouped by event properties.

        Reports can be shared outside LeadConduit such that anyone who has the
        URL to the shared report can view it without authentication. Each
        shared report URL contains a generated, unique, unguessable token,
        which is stored as a property in the report definition. To create the
        token for a report, use the `share` endpoint. To stop sharing a report,
        use the `unshare` endpoint, which will clear the token.'
      type: object
      properties:
        name:
          description: required name of the report
          type: string
        description:
          description: optional extra description
          type: string
        columns:
          description: Array of report columns
          type: array
          items:
            $ref: '#/components/schemas/report-column'
        rules:
          description: rules to match events to include
          type: array
          items:
            $ref: '#/components/schemas/ReportRule'
        group_by:
          description: group results by these event properties
          type: array
          items:
            type: string
        token:
          description: identifier used for sharing
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time report was created
          readOnly: true
        updated_at:
          $ref: '#/components/schemas/Timestamp'
          description: Time report was last updated
          readOnly: true
    report-column:
      $ref: '#/components/schemas/event-statistic'
      title: Report Column
    ReportMeta:
      description: Metadata on the report that was shared
      type: object
      properties:
        token:
          description: identifier used for sharing
          type: string
        account_name:
          description: The name of the account holder
          type: string
        vars:
          description: Array of variables associated to the report
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        flows:
          description: IDs and names of flows associated to report
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        entities:
          description: IDs and names of entities associated to report
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
    ReportRule:
      description: |
        An array of rules can be provided to filter events that are included in
        the report. If an event matches the filter, it's included in the
        results, otherwise it's not.  Each rule has a `lhv`, an `op`, and a
        `rhv`.

        Not all filter operators make sense for different property data types,
        so only certain operators are valid for each.

        Note: For `contains` and `includes` and `does not include` operators,
        the property must exist in order for the event to pass the filter. If
        the property does not exist, then the event will not pass the rule and
        will not be returned as part of the results.

        - `is equal to` Equal to – Note that if your property’s value is an
        array, `is equal to` can be used to filter for values inside that array.
        For example, eq: 5 will match a value of [5, 6, 7]. (String, Number,
        Boolean)
        - `is not equal to` Not equal to (String, Number, Boolean)
        - `is less than` Less than (Number)
        - `is less than or equal` Less than or equal to (Number)
        - `is greater than` Greater than (Number)
        - `is greater than or equal` Greater than or equal to (Number)
        - `is blank` Whether a specific property does not exist on an event
          record. The `rhv` cannot be provided. (String, Number, Boolean)
        - `is not blank` Whether a specific property exists on an event record. The `rhv` cannot be provided. (String, Number, Boolean)
        - `is true` Does the `lhv` evaluate to `true`? The `rhv` cannot be provided. (Boolean)
        - `is false` Does the `lhv` evaluate to `false`? The `rhv` cannot be provided. (Boolean)
        - `is included in` Whether or not the property value is in a given set
          of values. The value passed in must be an array of values. Example:
          [1,2,4,5]. (String, Number, Boolean)
        - `includes` Whether or not the string property value contains the
          given sequence of characters. (Array, String)
        - `does not include` Whether or not the string property value does not
          contain the given sequence of characters. (Array, String)
      type: object
      properties:
        lhv:
          type: string
          description: The name of the property to filter (e.g. vars.lead.email.domain)
        op:
          description: The operator to use on the property name (see below table)
          type: string
          enum:
            - is equal to
            - is not equal to
            - is less than
            - is less than or equal
            - is greater than
            - is greater than or equal
            - is blank
            - is not blank
            - is true
            - is false
            - is included in
            - includes
            - does not include
        rhv:
          description: The value to compare to the `lhv`
          type: string
    retry-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Retry Event
          type: object
          description: |
            When a recipient step results in an error outcome and retry is enabled, a retry event is recorded
          properties:
            type:
              description: Recorded after an error recipient event is retried
              type: string
              enum:
                - retry
            outcome:
              enum:
                - success
                - failure
                - error
                - skip
              x-enumDescriptions:
                success: The recipient accepted the lead
                failure: The recipient rejected the lead
                error: An error occurred while attempting to communicate with the recipient
                skip: The recipient step was skipped due to failure the rule set or cap having been met
            retry_status:
              type: string
              enum:
                - started
                - completed
            vars:
              $ref: '#/components/schemas/RecipientVariables'
            step_id:
              type: string
              description: The id of the step in the flow associated with this event
            caps_reached:
              type: boolean
              description: One or more of the recipient caps were met
            key:
              type: string
              description: The property name on the event where appended data is stored
            cost:
              type: number
              format: double
              description: The amount paid for the purchase of this lead
            purchase_price:
              type: number
              format: double
              description: The amount paid for the purchase of this lead
            sale_price:
              type: number
              format: double
              description: The revenue received for the sale of this lead
            revenue:
              type: number
              format: double
              description: The difference between the purchase price and the sale price
            module_id:
              $ref: '#/components/schemas/ModuleID'
            credential:
              $ref: '#/components/schemas/Credential'
            credential_updated:
              type: boolean
              description: Whether the credential used by the integration was refreshed
            package_version:
              $ref: '#/components/schemas/SemanticVersion'
            rule_set:
              $ref: '#/components/schemas/rule-set'
              description: 'The rule set configured on the recipient step when the lead was processed '
            mappings:
              type: array
              description: The mappings applied while invoking the integration
              items:
                $ref: '#/components/schemas/Mapping'
            pricing:
              $ref: '#/components/schemas/Pricing'
              description: The pricing configuration applied to this recipient
            transactions:
              $ref: '#/components/schemas/Transactions'
            wait_ms:
              type: integer
              description: The number of milliseconds that LeadConduit spent waiting the recipient to respond
            total_ms:
              type: integer
              description: 'The number of milliseconds that elapsed since the lead was submitted '
    Route:
      description: |
        A route is defined by a Rule Set and its corresponding Flow and Source.
      type: object
      properties:
        id:
          description: Short ID of this route
          $ref: '#/components/schemas/ShortID'
        flow_id:
          description: The ID of the Flow this route directs leads to
          $ref: '#/components/schemas/ID'
        source_id:
          description: The ID of the Source this route directs leads to
          $ref: '#/components/schemas/ID'
        rule_set:
          description: |
            The associated Flow & Source are used when these rules match the
            lead
          $ref: '#/components/schemas/rule-set'
    Router:
      x-tags:
        - Routers
      description: |
        A router is a single lead-submission endpoint that's able to distribute
        lead submissions to any one of an account's various [Flows](https://developers.activeprospect.com/docs/leadconduit/api/tag/Flows/),
        based on evaluation of [rules](https://developers.activeprospect.com/docs/leadconduit/api/tag/Rules/#tag/Rules/schema/rule-set).

        The first rules that match are used to select the Flow and Source;
        subsequent rules are ignored.

        Only one Router for a given integration module-id
        should exist in an account.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: ID of this router
        module_id:
          $ref: '#/components/schemas/ID'
          description: A pointer to the integration code to use for this router
        routes:
          description: The routes to be evaluated by this router
          type: array
          items:
            $ref: '#/components/schemas/Route'
        created_at:
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
        updated_at:
          $ref: '#/components/schemas/Timestamp'
          readOnly: true
    Rule:
      x-tags:
        - Rules
      oneOf:
        - $ref: '#/components/schemas/binary-rule'
        - $ref: '#/components/schemas/unary-rule'
    rule-set:
      x-tags:
        - Rules
      title: Rule Set
      type: object
      description: |
        A rule set is a collection of rules to evaluate. The `op` property determines whether all rules must pass (`and`) or just one of them must pass (`or`) in order for the rule set to be considered passing.
      properties:
        id:
          $ref: '#/components/schemas/ShortID'
          description: The ID of the rule set in this flow
          example: 0d144a
          readOnly: true
        op:
          type: string
          description: Determines whether all rules or just some rules must pass for the overall set to pass
          enum:
            - and
            - or
          x-enumDescriptions:
            and: All rules in the set must pass
            or: Only one rule in the set must pass
        rules:
          type: array
          description: The required rules to be evaluated. Rule sets may also be specified as array elements in order to achieve nesting.
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/binary-rule'
              - $ref: '#/components/schemas/unary-rule'
              - $ref: '#/components/schemas/rule-set'
      additionalProperties: false
      required:
        - op
        - rules
    SemanticVersion:
      type: string
      description: A <a href="http://semver.org" target="_blank">semantic version</a>
    ShortID:
      type: string
      pattern: ^[0-9a-zA-Z]{6}$
      example: 1aacd0
      readOnly: true
    Source:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ShortID'
        integration:
          $ref: '#/components/schemas/Integration'
        entity:
          $ref: '#/components/schemas/EntitySummary'
        acceptance_criteria:
          $ref: '#/components/schemas/acceptance-criteria'
        feedback:
          $ref: '#/components/schemas/Feedback'
        caps:
          $ref: '#/components/schemas/Caps'
        ping_limits:
          $ref: '#/components/schemas/PingLimits'
        credential_id:
          $ref: '#/components/schemas/ID'
        pricing:
          $ref: '#/components/schemas/Pricing'
        pricing_service:
          $ref: '#/components/schemas/PricingServiceConfiguration'
        enabled:
          type: boolean
        authentication_required:
          type: boolean
      additionalProperties: true
      required:
        - integration
        - entity
    source-event:
      allOf:
        - $ref: '#/components/schemas/EventProperties'
        - title: Source Event
          type: object
          description: The source event is created after all steps have been processed. It represents the outcome of lead processing from the perspective of the lead source. A source event records the below properties in addition to the event properties shown above.
          properties:
            type:
              description: Recorded after a source submits a lead to a flow
              type: string
              enum:
                - source
            outcome:
              enum:
                - success
                - failure
                - error
              x-enumDescriptions:
                success: The source was notified in the response that the lead was accepted
                failure: The source was notified in the response that the lead was rejected
                error: The source was notified in the response that an error occurred while processing the lead
            vars:
              $ref: '#/components/schemas/SourceVariables'
            module_id:
              $ref: '#/components/schemas/ModuleID'
              description: The integration module ID configured for the source
            package_version:
              $ref: '#/components/schemas/SemanticVersion'
              description: The semantic version of the integration package
            acceptance_criteria:
              $ref: '#/components/schemas/acceptance-criteria'
              description: The acceptance criteria configured on the source when the lead was processed
            step_count:
              type: integer
              description: The number of steps processed for this lead (>= 0 and <= total number of steps)
              example: 4
            appended:
              type: object
              description: All data appended while handing the lead
            request:
              $ref: '#/components/schemas/HttpRequest'
              description: The inbound HTTP request
            response:
              $ref: '#/components/schemas/HttpResponse'
              description: The inbound HTTP response
    SourceVariables:
      title: Source Variables
      description: |
        All data available at the time LeadConduit started processing this event
      type: object
      patternProperties:
        ^submission\.:
          $ref: '#/components/schemas/VariableSubmissionMetadata'
        ^account\.:
          $ref: '#/components/schemas/VariableAccountMetadata'
        ^flow\.:
          $ref: '#/components/schemas/VariableFlowMetadata'
        ^source\.:
          $ref: '#/components/schemas/VariableSourceMetadata'
        ^lead\.:
          $ref: '#/components/schemas/VariableLeadData'
      additionalProperties: false
    Sources:
      oneOf:
        - type: 'null'
        - type: array
          items:
            $ref: '#/components/schemas/Source'
    Status:
      x-tags:
        - System
      type: object
      properties:
        version:
          description: Which version is running
          type: string
          pattern: ^\d+\.\d+\.\d+$
          example: 13.5.0
    SubmissionDocAccessLogs:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: '#/components/schemas/ID'
          accessor:
            type: object
            properties:
              account:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  name:
                    type: string
                    readOnly: true
              user:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  name:
                    type: string
                    readOnly: true
                  email:
                    type: string
                    readOnly: true
          submission_doc:
            type: object
            properties:
              flow:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  name:
                    type: string
                    readOnly: true
                  account:
                    type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/ID'
                      name:
                        type: string
                        readOnly: true
              source:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  name:
                    type: string
                    readOnly: true
          created_at:
            $ref: '#/components/schemas/Timestamp'
            description: Read-only time the access log was created
            readOnly: true
          last_accessed_at:
            $ref: '#/components/schemas/Timestamp'
            description: Read-only time the access log was accessed most recently
            readOnly: true
          access_count:
            description: The number of times the submission document has been accessed from creation to the most recent access.
            type: integer
            readOnly: true
    SubmissionVariables:
      title: Submission Variables
      description: |
        Variables prefixed with `submission.` are metadata about an actual lead
        submission. Submission variables are created automatically when a lead
        is submitted.
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          description: The time the lead was submitted
        ip:
          description: The IP address from which the lead was submitted
          type: string
    Template:
      type: string
      title: Template
    Timestamp:
      type: string
      format: date-time
    TokenCredential:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The ID of the credential which uniquely identifies it
        name:
          description: Friendly name for this credential
          type: string
        type:
          description: 'The type of model changes were performed on: user, token, oauth'
          type: string
          enum:
            - token
        package:
          description: The name of the LeadConduit integration package to which this credential belongs
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        token:
          description: The access token to use to with type token
          type: string
          minLength: 1
      required:
        - id
        - name
        - type
        - package
        - token
      additionalProperties: true
    Transactions:
      type: array
      description: A list of HTTP transactions that occurred while processing the lead
      items:
        type: object
        description: An HTTP transaction initiated by the integration
        properties:
          request:
            $ref: '#/components/schemas/HttpRequest'
            description: An HTTP request sent by the integration
          response:
            $ref: '#/components/schemas/HttpResponse'
            description: An HTTP response received by the integration
          ms:
            type: integer
            description: The number of milliseconds that elapsed between sending request and receiving the response
        required:
          - request
          - response
          - ms
    TypeName:
      type: string
      enum:
        - boolean
        - city
        - credential
        - date
        - email
        - first_name
        - gender
        - last_name
        - number
        - phone
        - postal_code
        - range
        - ssn
        - state
        - street
        - string
        - time
        - trustedform_url
        - url
    TypeComponent:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/TypeName'
        description:
          type: string
      required:
        - name
        - type
    Type:
      x-tags:
        - Fields
      type: object
      description: Describes a LeadConduit field data type
      properties:
        name:
          $ref: '#/components/schemas/TypeName'
        maskable:
          type: boolean
          description: Are values of this type masked before they are persisted to the LeadConduit database?
        components:
          type: array
          items:
            $ref: '#/components/schemas/TypeComponent'
          maxItems: 0
        operators:
          type: array
          items:
            type: string
            enum:
              - is equal to
              - is not equal to
              - is blank
              - is not blank
              - is greater than
              - is greater than or equal to
              - is less than
              - is less than or equal to
              - is true
              - is not true
              - is false
              - is not false
              - format is valid
              - format is invalid
              - includes
              - does not include
              - is included in
              - is not included in
              - is between
              - is not between
              - matches pattern
              - does not match pattern
            minLength: 1
      required:
        - name
        - operators
        - components
    unary-rule:
      title: Unary Rule
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ShortID'
          description: ID for this rule
        lhv:
          type: string
          description: The value to be evaluated ([templating](https://developers.activeprospect.com/docs/leadconduit/api/tag/Templates/) is supported)
          example: lead.email
        op:
          type: string
          enum:
            - is blank
            - is not blank
            - is true
            - is false
            - is not true
            - is not false
            - format is valid
            - format is invalid
            - is obscene
            - is not obscene
          x-enumDescriptions:
            is blank: Is the `lhv` missing or empty?
            is not blank: Does the `lhv` contain a value?
            is true: Does the `lhv` evaluate to `true`?
            is false: Does the `lhv` evaluate to `false`?
            format is valid: The `lhv` was successfully interpreted as a value of its specified type.
            format is invalid: The `lhv` could not be interpreted as a value of its specified type.
            is obscene: Does the `lhv` contain obscene language?
            is not obscene: Does the `lhv` contain no obscene language?
          example: is not blank
          description: |
            Unary operators evaluate the `lhv`.
        rule_set:
          $ref: '#/components/schemas/rule-set'
      additionalProperties: false
      required:
        - lhv
        - op
    UpdateSubmissionDocsAccessLogsVisibility:
      type: object
      properties:
        ui_state:
          description: Submission docs access logs visibility
          type: object
          properties:
            hidden:
              description: Whether the submission docs access logs will be retrieved by the query endpoint
              type: boolean
    UserCredential:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The ID of the credential which uniquely identifies it
        name:
          description: Friendly name for this credential
          type: string
        type:
          description: 'The type of model changes were performed on: user, token, oauth'
          type: string
          enum:
            - user
        package:
          description: The name of the LeadConduit integration package to which this credential belongs
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        username:
          description: The username to user for basic authentication
          type: string
          minLength: 1
        password:
          description: The password to user for basic authentication
          type: string
          minLength: 1
      required:
        - id
        - name
        - type
        - package
        - username
        - password
      additionalProperties: true
    UserSubscription:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        active_at:
          type: string
          format: date-time
        inactive_at:
          type: string
          format: date-time
        state:
          type: string
        account_id:
          $ref: '#/components/schemas/ID'
        product_offering_id:
          type: string
        product_offering:
          type: object
          properties:
            id:
              type: string
            product_id:
              type: string
            component:
              type: string
            name:
              type: string
    UserUpdate:
      type: object
      properties:
        ui_state:
          description: User interface state
          type: object
          properties:
            has_seen_free_account_modal:
              description: Whether the user has seen the free account modal
              type: boolean
    Var:
      type: object
      properties:
        name:
          type: string
        last_used_at:
          $ref: '#/components/schemas/Timestamp'
        first_used_at:
          $ref: '#/components/schemas/Timestamp'
        type:
          type: string
        description:
          type: string
        label:
          type: string
        module_id:
          type: string
        entity_id:
          $ref: '#/components/schemas/ID'
        examples:
          type: array
          items:
            type: string
      required:
        - name
        - label
    Variable:
      title: Variable
      type: object
      description: |
        All data available at the time LeadConduit started processing this event
      patternProperties:
        ^submission\.:
          $ref: '#/components/schemas/SubmissionVariables'
        ^feedback\.:
          $ref: '#/components/schemas/FeedbackVariables'
        ^account\.:
          $ref: '#/components/schemas/AccountVariables'
        ^flow\.:
          $ref: '#/components/schemas/FlowVariables'
        ^source\.:
          $ref: '#/components/schemas/VariableSourceMetadata'
        ^lead\.:
          $ref: '#/components/schemas/LeadVariables'
      additionalProperties: true
    VariableAccountMetadata:
      title: Account Metadata
      description: |
        Variables prefixed with `account.` are metadata about the account handled the lead. Account variables are created 
        automatically when a lead is submitted.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The unique ID of the account
        sso_id:
          $ref: '#/components/schemas/ID'
          description: The account's ID global across all ActiveProspect products
        name:
          description: The name of the source
          type: string
          example: A Corporation
    VariableAppendedData:
      type: object
      title: Appended Variables
      description: |
        Variables prefixed with anything other than a metadata prefix or the `lead.` prefix
        are appended data.

        Each recipient step appends data in a special key, specified by the `key` property
        on the recipient event.
      additionalProperties: true
    VariableFeedbackMetadata:
      title: Feedback Metadata
      description: |
        Variables prefixed with `feedback.` are metadata about lead feedback.
        Feedback variables are created automatically when feedback is provided.
      type: object
      properties:
        timestamp:
          description: The time the feedback was provided
          $ref: '#/components/schemas/Timestamp'
        type:
          description: The type of feedback provided (return or conversion)
          type: string
        reason:
          description: The underlying reason why feedback was provided
          type: string
    VariableFlowMetadata:
      title: Flow Metadata
      description: |
        Variables prefixed with `flow`. are metadata about the flow that
        handled the lead. Flow variables are created automatically when a lead
        is submitted.
      type: object
      properties:
        id:
          description: The unique ID of the flow
          $ref: '#/components/schemas/ID'
        name:
          description: The name of the flow
          type: string
    VariableLeadData:
      type: object
      title: Lead Variables
      description: |
        Variables prefixed with `lead.` are lead variables. Lead variables are
        created when a lead is submitted by a source to a flow. These variables
        typically contain data that was collected from the consumer on a web
        form.

        Each variable name corresponds to a
        [field](https://developers.activeprospect.com/docs/leadconduit/api/tag/Fields/)
        ID. If the source submits a piece of data and the matching field ID has
        not been added to the flow, then a variable with that data will not be
        created. If the source needs to submit data using a parameter that does
        not have a matching field name, then a mapping
        must be added to map the source's parameter to the field name. For
        example, if a source submits `fname=Joe` then a mapping must be added
        in order to create the `lead.first_name` variable with the value "Joe".

        For a list of all possible lead variables that are available "out of
        the box" in LeadConduit, simply prepend `lead.` to any of the standard
        field IDs.
      additionalProperties: true
    VariableRecipientMetadata:
      title: Recipient Metadata
      description: |
        Variables prefixed with `recipient.` are metadata about the recipient
        that received the lead. Recipient variables are created automatically
        when a lead is submitted to a recipient. These variables are only
        present on recipient events.
      type: object
      properties:
        id:
          description: The unique ID of the recipient
          $ref: '#/components/schemas/ID'
        name:
          description: The name of the recipient
          type: string
    VariableSourceMetadata:
      title: Source Metadata
      description: |
        Variables prefixed with `source.` are metadata about the source that
        submitted the lead. Source variables are created automatically when a
        lead is submitted.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
          description: The unique ID of the source
        name:
          description: The name of the source
          type: string
          example: A Corporation
    VariableSubmissionMetadata:
      title: Submission Metadata
      description: |
        Variables prefixed with `submission.` are metadata about an actual lead
        submission. Submission variables are created automatically when a lead
        is submitted.
      type: object
      properties:
        timestamp:
          description: The time the lead was submitted
          $ref: '#/components/schemas/Timestamp'
        ip:
          description: The IP address from which the lead was submitted
          type: string
    Variables:
      x-tags:
        - Variables
      type: object
      anyOf:
        - $ref: '#/components/schemas/LeadVariables'
        - $ref: '#/components/schemas/AccountVariables'
        - $ref: '#/components/schemas/SourceVariables'
        - $ref: '#/components/schemas/FlowVariables'
        - $ref: '#/components/schemas/RecipientVariables'
        - $ref: '#/components/schemas/SubmissionVariables'
        - $ref: '#/components/schemas/FeedbackVariables'
    VersionUi:
      title: Version UI
      description: Returns the current UI app version.
      type: object
      properties:
        version:
          type: string
x-tagGroups:
  - name: API Endpoints
    tags:
      - Flows
      - Leads
      - Events
      - Fields
      - Entities
      - Destinations
      - Changelogs
      - Reports
      - Caps and Limits
      - Firehose
      - Routers
      - Account
      - Invitations
      - System
  - name: Concepts
    tags:
      - Rules
      - Variables
      - Types
      - Templates
